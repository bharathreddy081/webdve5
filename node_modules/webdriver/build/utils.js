"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSuccessfulResponse = isSuccessfulResponse;
exports.isValidParameter = isValidParameter;
exports.getPrototype = getPrototype;
exports.commandCallStructure = commandCallStructure;
exports.isW3CSession = isW3CSession;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _command = _interopRequireDefault(require("./command"));

var _webdriver = _interopRequireDefault(require("../protocol/webdriver.json"));

var _mjsonwp = _interopRequireDefault(require("../protocol/mjsonwp.json"));

var _jsonwp = _interopRequireDefault(require("../protocol/jsonwp.json"));

var _appium = _interopRequireDefault(require("../protocol/appium.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('webdriver');
/**
 * check if WebDriver requests was successful
 * @param  {Object}  body  body payload of response
 * @return {Boolean}       true if request was successful
 */

function isSuccessfulResponse({
  body,
  statusCode
} = {}) {
  /**
   * response contains a body
   */
  if (!body || typeof body.value === 'undefined') {
    log.debug('request failed due to missing body');
    return false;
  }
  /**
   * ignore failing element request to enable lazy loading capability
   */


  if (body.status && body.status === 7 && body.value.message && body.value.message.startsWith('no such element')) {
    return true;
  }
  /**
   * if it has a status property, it should be 0
   * (just here to stay backwards compatible to the jsonwire protocol)
   */


  if (body.status && body.status !== 0) {
    log.debug(`request failed due to status ${body.status}`);
    return false;
  }

  const hasErrorResponse = body.value && (body.value.error || body.value.stackTrace || body.value.stacktrace);
  /**
   * check status code
   */

  if (statusCode === 200 && !hasErrorResponse) {
    return true;
  }
  /**
   * if an element was not found we don't flag it as failed request because
   * we lazy load it
   */


  if (statusCode === 404 && body.value && body.value.error === 'no such element') {
    return true;
  }
  /**
   * that has no error property (Appium only)
   */


  if (hasErrorResponse) {
    log.debug('request failed due to response error:', body.value.error);
    return false;
  }

  return true;
}
/**
 * checks if command argument is valid according to specificiation
 *
 * @param  {*}       arg           command argument
 * @param  {Object}  expectedType  parameter type (e.g. `number`, `string[]` or `(number|string)`)
 * @return {Boolean}               true if argument is valid
 */


function isValidParameter(arg, expectedType) {
  let shouldBeArray = false;

  if (expectedType.slice(-2) === '[]') {
    expectedType = expectedType.slice(0, -2);
    shouldBeArray = true;
  }
  /**
   * check type of each individual array element
   */


  if (shouldBeArray) {
    if (!Array.isArray(arg)) {
      return false;
    }
  } else {
    /**
     * transform to array to have a unified check
     */
    arg = [arg];
  }

  for (const argEntity of arg) {
    if (!(typeof argEntity).match(expectedType)) {
      return false;
    }
  }

  return true;
}
/**
 * creates the base prototype for the webdriver monad
 */


function getPrototype(isW3C) {
  const prototype = {};
  const ProtocolCommands = Object.assign(isW3C ? _webdriver.default : _jsonwp.default, _mjsonwp.default, _appium.default);

  for (const [endpoint, methods] of Object.entries(ProtocolCommands)) {
    for (const [method, commandData] of Object.entries(methods)) {
      prototype[commandData.command] = {
        value: (0, _command.default)(method, endpoint, commandData)
      };
    }
  }

  return prototype;
}
/**
 * get command call structure
 * (for logging purposes)
 */


function commandCallStructure(commandName, args) {
  const callArgs = args.map(arg => {
    if (typeof arg === 'string') {
      arg = `"${arg}"`;
    } else if (typeof arg === 'function') {
      arg = '<fn>';
    } else if (arg === null) {
      arg = 'null';
    } else if (typeof arg === 'object') {
      arg = '<object>';
    } else if (typeof arg === 'undefined') {
      arg = typeof arg;
    }

    return arg;
  }).join(', ');
  return `${commandName}(${callArgs})`;
}
/**
 * check if session is based on W3C protocol based on the /session response
 * @param  {Object}  capabilities  caps of session response
 * @return {Boolean}               true if W3C (browser)
 */


function isW3CSession({
  capabilities
}) {
  /**
   * JSONWire protocol doesn't return a property `capabilities`.
   * Also check for Appium response as it is using JSONWire protocol for most of the part.
   */
  if (!capabilities) {
    return false;
  }
  /**
   * assume session to be a WebDriver session when
   * - capabilities are returned
   *   (https://w3c.github.io/webdriver/#dfn-new-sessions)
   * - platformName is returned which is not defined in the JSONWire protocol
   */


  const isAppium = capabilities.automationName || capabilities.deviceName;
  return Boolean(capabilities.platformName || isAppium);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,