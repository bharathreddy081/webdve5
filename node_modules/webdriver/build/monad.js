"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WebDriver;

require("source-map-support/register");

var _events = require("events");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SCOPE_TYPES = {
  'browser': function Browser() {},
  'element': function Element() {}
};

function WebDriver(options, modifier, propertiesObject = {}) {
  /**
   * In order to allow named scopes for elements we have to propagate that
   * info within the `propertiesObject` object. This doesn't have any functional
   * advantages just provides better description of objects when debugging them
   */
  const scopeType = SCOPE_TYPES[propertiesObject.scope] || SCOPE_TYPES['browser'];
  delete propertiesObject.scope;
  const prototype = Object.create(scopeType.prototype, {
    isW3C: {
      value: options.isW3C
    }
  });
  const log = (0, _logger.default)('webdriver');
  const eventHandler = new _events.EventEmitter();
  const EVENTHANDLER_FUNCTIONS = Object.getPrototypeOf(eventHandler);
  /**
   * WebDriver monad
   */

  function unit(sessionId, commandWrapper) {
    propertiesObject.commandList = {
      value: Object.keys(propertiesObject)
    };
    propertiesObject.options = {
      value: options
      /**
       * allow to wrap commands if necessary
       * e.g. in wdio-cli to make them synchronous
       */

    };

    if (typeof commandWrapper === 'function') {
      for (const [commandName, {
        value
      }] of Object.entries(propertiesObject)) {
        if (typeof value !== 'function') {
          continue;
        }

        propertiesObject[commandName].value = commandWrapper(commandName, value);
      }
    }

    let client = Object.create(prototype, propertiesObject);
    client.sessionId = sessionId;
    /**
     * register capabilities only to browser scope
     */

    if (scopeType.name === 'Browser') {
      client.capabilities = options.capabilities;
    }

    if (typeof modifier === 'function') {
      client = modifier(client, options);
    }

    client.addCommand = function (name, func, proto) {
      unit.lift(name, commandWrapper(name, func), proto);
    };

    return client;
  }
  /**
   * Enhance monad prototype with function
   * @param  {String}   name   name of function to attach to prototype
   * @param  {Function} func   function to be added to prototype
   * @param  {Object}   proto  prototype to add function to (optional)
   */


  unit.lift = function (name, func, proto) {
    (proto || prototype)[name] = function next(...args) {
      const client = unit(this.sessionId);
      log.info('COMMAND', (0, _utils.commandCallStructure)(name, args));
      /**
       * set name of function for better error stack
       */

      Object.defineProperty(func, 'name', {
        value: name,
        writable: false
      });
      const result = func.apply(client, args);
      /**
       * always transform result into promise as we don't know whether or not
       * the user is running tests with wdio-sync or not
       */

      Promise.resolve(result).then(res => {
        log.info('RESULT', res);
        this.emit('result', {
          name,
          result: res
        });
      });
      return result;
    };
  };
  /**
   * register event emitter
   */


  for (let eventCommand in EVENTHANDLER_FUNCTIONS) {
    prototype[eventCommand] = function (...args) {
      eventHandler[eventCommand](...args);
      return this;
    };
  }

  return unit;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,