"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULTS = void 0;

require("source-map-support/register");

var _stream = require("stream");

const DEFAULTS = {
  /**
   * protocol of automation driver
   */
  protocol: {
    type: 'string',
    default: 'http',
    match: /(http|https)/
  },

  /**
   * hostname of automation driver
   */
  hostname: {
    type: 'string',
    default: '0.0.0.0'
  },

  /**
   * port of automation driver
   */
  port: {
    type: 'number',
    default: 4444
  },

  /**
   * path to WebDriver endpoints
   */
  path: {
    type: 'string',
    default: '/wd/hub'
  },

  /**
   * A key-value store of query parameters to be added to every selenium request
   */
  queryParams: {
    type: 'object'
  },

  /**
   * capability of WebDriver session
   */
  capabilities: {
    type: 'object',
    required: true
  },

  /**
   * Level of logging verbosity
   */
  logLevel: {
    type: 'string',
    default: 'info',
    match: /(trace|debug|info|warn|error)/
  },

  /**
   * logOutput as file path or writeable stream
   */
  logOutput: {
    type: param => {
      if (typeof param === 'string' || param instanceof _stream.Writable) {
        return;
      }

      throw new Error('logOutput needs to be a string or a writeable stream');
    }
  },

  /**
   * Timeout for any request to the Selenium server
   */
  connectionRetryTimeout: {
    type: 'number',
    default: 90000
  },

  /**
   * Count of request retries to the Selenium server
   */
  connectionRetryCount: {
    type: 'number',
    default: 2
  },

  /**
   * cloud user if applicable
   */
  user: {
    type: 'string'
  },

  /**
   * access key to user
   */
  key: {
    type: 'string'
  }
};
exports.DEFAULTS = DEFAULTS;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiREVGQVVMVFMiLCJwcm90b2NvbCIsInR5cGUiLCJkZWZhdWx0IiwibWF0Y2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRoIiwicXVlcnlQYXJhbXMiLCJjYXBhYmlsaXRpZXMiLCJyZXF1aXJlZCIsImxvZ0xldmVsIiwibG9nT3V0cHV0IiwicGFyYW0iLCJXcml0YWJsZSIsIkVycm9yIiwiY29ubmVjdGlvblJldHJ5VGltZW91dCIsImNvbm5lY3Rpb25SZXRyeUNvdW50IiwidXNlciIsImtleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRU8sTUFBTUEsUUFBUSxHQUFHO0FBQ3BCOzs7QUFHQUMsRUFBQUEsUUFBUSxFQUFFO0FBQ05DLElBQUFBLElBQUksRUFBRSxRQURBO0FBRU5DLElBQUFBLE9BQU8sRUFBRSxNQUZIO0FBR05DLElBQUFBLEtBQUssRUFBRTtBQUhELEdBSlU7O0FBU3BCOzs7QUFHQUMsRUFBQUEsUUFBUSxFQUFFO0FBQ05ILElBQUFBLElBQUksRUFBRSxRQURBO0FBRU5DLElBQUFBLE9BQU8sRUFBRTtBQUZILEdBWlU7O0FBZ0JwQjs7O0FBR0FHLEVBQUFBLElBQUksRUFBRTtBQUNGSixJQUFBQSxJQUFJLEVBQUUsUUFESjtBQUVGQyxJQUFBQSxPQUFPLEVBQUU7QUFGUCxHQW5CYzs7QUF1QnBCOzs7QUFHQUksRUFBQUEsSUFBSSxFQUFFO0FBQ0ZMLElBQUFBLElBQUksRUFBRSxRQURKO0FBRUZDLElBQUFBLE9BQU8sRUFBRTtBQUZQLEdBMUJjOztBQThCcEI7OztBQUdBSyxFQUFBQSxXQUFXLEVBQUU7QUFDVE4sSUFBQUEsSUFBSSxFQUFFO0FBREcsR0FqQ087O0FBb0NwQjs7O0FBR0FPLEVBQUFBLFlBQVksRUFBRTtBQUNWUCxJQUFBQSxJQUFJLEVBQUUsUUFESTtBQUVWUSxJQUFBQSxRQUFRLEVBQUU7QUFGQSxHQXZDTTs7QUEyQ3BCOzs7QUFHQUMsRUFBQUEsUUFBUSxFQUFFO0FBQ05ULElBQUFBLElBQUksRUFBRSxRQURBO0FBRU5DLElBQUFBLE9BQU8sRUFBRSxNQUZIO0FBR05DLElBQUFBLEtBQUssRUFBRTtBQUhELEdBOUNVOztBQW1EcEI7OztBQUdBUSxFQUFBQSxTQUFTLEVBQUU7QUFDUFYsSUFBQUEsSUFBSSxFQUFHVyxLQUFELElBQVc7QUFDYixVQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkJBLEtBQUssWUFBWUMsZ0JBQWxELEVBQTREO0FBQ3hEO0FBQ0g7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLENBQVUsc0RBQVYsQ0FBTjtBQUNIO0FBUE0sR0F0RFM7O0FBK0RwQjs7O0FBR0FDLEVBQUFBLHNCQUFzQixFQUFFO0FBQ3BCZCxJQUFBQSxJQUFJLEVBQUUsUUFEYztBQUVwQkMsSUFBQUEsT0FBTyxFQUFFO0FBRlcsR0FsRUo7O0FBc0VwQjs7O0FBR0FjLEVBQUFBLG9CQUFvQixFQUFFO0FBQ2xCZixJQUFBQSxJQUFJLEVBQUUsUUFEWTtBQUVsQkMsSUFBQUEsT0FBTyxFQUFFO0FBRlMsR0F6RUY7O0FBNkVwQjs7O0FBR0FlLEVBQUFBLElBQUksRUFBRTtBQUNGaEIsSUFBQUEsSUFBSSxFQUFFO0FBREosR0FoRmM7O0FBbUZwQjs7O0FBR0FpQixFQUFBQSxHQUFHLEVBQUU7QUFDRGpCLElBQUFBLElBQUksRUFBRTtBQURMO0FBdEZlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV3JpdGFibGUgfSBmcm9tICdzdHJlYW0nXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUUyA9IHtcbiAgICAvKipcbiAgICAgKiBwcm90b2NvbCBvZiBhdXRvbWF0aW9uIGRyaXZlclxuICAgICAqL1xuICAgIHByb3RvY29sOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBkZWZhdWx0OiAnaHR0cCcsXG4gICAgICAgIG1hdGNoOiAvKGh0dHB8aHR0cHMpL1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogaG9zdG5hbWUgb2YgYXV0b21hdGlvbiBkcml2ZXJcbiAgICAgKi9cbiAgICBob3N0bmFtZToge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZGVmYXVsdDogJzAuMC4wLjAnXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBwb3J0IG9mIGF1dG9tYXRpb24gZHJpdmVyXG4gICAgICovXG4gICAgcG9ydDoge1xuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogNDQ0NFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogcGF0aCB0byBXZWJEcml2ZXIgZW5kcG9pbnRzXG4gICAgICovXG4gICAgcGF0aDoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZGVmYXVsdDogJy93ZC9odWInXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBIGtleS12YWx1ZSBzdG9yZSBvZiBxdWVyeSBwYXJhbWV0ZXJzIHRvIGJlIGFkZGVkIHRvIGV2ZXJ5IHNlbGVuaXVtIHJlcXVlc3RcbiAgICAgKi9cbiAgICBxdWVyeVBhcmFtczoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0J1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogY2FwYWJpbGl0eSBvZiBXZWJEcml2ZXIgc2Vzc2lvblxuICAgICAqL1xuICAgIGNhcGFiaWxpdGllczoge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIExldmVsIG9mIGxvZ2dpbmcgdmVyYm9zaXR5XG4gICAgICovXG4gICAgbG9nTGV2ZWw6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGRlZmF1bHQ6ICdpbmZvJyxcbiAgICAgICAgbWF0Y2g6IC8odHJhY2V8ZGVidWd8aW5mb3x3YXJufGVycm9yKS9cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGxvZ091dHB1dCBhcyBmaWxlIHBhdGggb3Igd3JpdGVhYmxlIHN0cmVhbVxuICAgICAqL1xuICAgIGxvZ091dHB1dDoge1xuICAgICAgICB0eXBlOiAocGFyYW0pID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW0gPT09ICdzdHJpbmcnIHx8IHBhcmFtIGluc3RhbmNlb2YgV3JpdGFibGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsb2dPdXRwdXQgbmVlZHMgdG8gYmUgYSBzdHJpbmcgb3IgYSB3cml0ZWFibGUgc3RyZWFtJylcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGltZW91dCBmb3IgYW55IHJlcXVlc3QgdG8gdGhlIFNlbGVuaXVtIHNlcnZlclxuICAgICAqL1xuICAgIGNvbm5lY3Rpb25SZXRyeVRpbWVvdXQ6IHtcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDkwMDAwXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDb3VudCBvZiByZXF1ZXN0IHJldHJpZXMgdG8gdGhlIFNlbGVuaXVtIHNlcnZlclxuICAgICAqL1xuICAgIGNvbm5lY3Rpb25SZXRyeUNvdW50OiB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBkZWZhdWx0OiAyXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBjbG91ZCB1c2VyIGlmIGFwcGxpY2FibGVcbiAgICAgKi9cbiAgICB1c2VyOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBhY2Nlc3Mga2V5IHRvIHVzZXJcbiAgICAgKi9cbiAgICBrZXk6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9XG59XG4iXX0=