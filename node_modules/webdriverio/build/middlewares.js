"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiremoteHandler = exports.elementErrorHandler = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _refetchElement = _interopRequireDefault(require("./utils/refetchElement"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('webdriverio');
/**
 * This method is an command wrapper for elements that checks if a command is called
 * that wasn't found on the page and automatically waits for it
 *
 * @param  {Function} fn  commandWrap from wdio-sync package (or shim if not running in sync)
 */

const elementErrorHandler = fn => (commandName, commandFn) => {
  return async function (...args) {
    /**
     * wait on element if:
     *  - elementId couldn't be fetched in the first place
     *  - command is not explicit wait command for existance or displayedness
     */
    if (!this.elementId && !commandName.match(/(wait(Until|ForDisplayed|ForExist|ForEnabled)|isExisting)/)) {
      log.debug(`command ${commandName} was called on an element ("${this.selector}") ` + 'that wasn\'t found, waiting for it...');
      /**
       * create new promise so we can apply a custom error message in cases waitForExist fails
       */

      try {
        await this.waitForExist();
      } catch (_unused) {
        throw new Error(`Can't call ${commandName} on element with selector "${this.selector}" because element wasn't found`);
      }
      /**
       * if waitForExist was successful requery element and assign elementId to the scope
       */


      const element = await this.parent.$(this.selector);
      this.elementId = element.elementId;
    }

    try {
      return await fn(commandName, commandFn).apply(this, args);
    } catch (error) {
      if (error.message.includes('stale element reference')) {
        const element = await (0, _refetchElement.default)(this);
        this.elementId = element.elementId;
        this.parent = element.parent;
        return await fn(commandName, commandFn).apply(this, args);
      }

      throw error;
    }
  };
};
/**
 * handle single command calls from multiremote instances
 */


exports.elementErrorHandler = elementErrorHandler;

const multiremoteHandler = wrapCommand => commandName => {
  return wrapCommand(commandName, function (...args) {
    const commandResults = this.instances.map(instanceName => {
      return this[instanceName][commandName](...args);
    });
    return Promise.all(commandResults);
  });
};

exports.multiremoteHandler = multiremoteHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9taWRkbGV3YXJlcy5qcyJdLCJuYW1lcyI6WyJsb2ciLCJlbGVtZW50RXJyb3JIYW5kbGVyIiwiZm4iLCJjb21tYW5kTmFtZSIsImNvbW1hbmRGbiIsImFyZ3MiLCJlbGVtZW50SWQiLCJtYXRjaCIsImRlYnVnIiwic2VsZWN0b3IiLCJ3YWl0Rm9yRXhpc3QiLCJFcnJvciIsImVsZW1lbnQiLCJwYXJlbnQiLCIkIiwiYXBwbHkiLCJlcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsIm11bHRpcmVtb3RlSGFuZGxlciIsIndyYXBDb21tYW5kIiwiY29tbWFuZFJlc3VsdHMiLCJpbnN0YW5jZXMiLCJtYXAiLCJpbnN0YW5jZU5hbWUiLCJQcm9taXNlIiwiYWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBRyxxQkFBTyxhQUFQLENBQVo7QUFFQTs7Ozs7OztBQU1PLE1BQU1DLG1CQUFtQixHQUFJQyxFQUFELElBQVEsQ0FBQ0MsV0FBRCxFQUFjQyxTQUFkLEtBQTRCO0FBQ25FLFNBQU8sZ0JBQWdCLEdBQUdDLElBQW5CLEVBQXlCO0FBQzVCOzs7OztBQUtBLFFBQUksQ0FBQyxLQUFLQyxTQUFOLElBQW1CLENBQUNILFdBQVcsQ0FBQ0ksS0FBWixDQUFrQiwyREFBbEIsQ0FBeEIsRUFBd0c7QUFDcEdQLE1BQUFBLEdBQUcsQ0FBQ1EsS0FBSixDQUNLLFdBQVVMLFdBQVksK0JBQThCLEtBQUtNLFFBQVMsS0FBbkUsR0FDQSx1Q0FGSjtBQUtBOzs7O0FBR0EsVUFBSTtBQUNBLGNBQU0sS0FBS0MsWUFBTCxFQUFOO0FBQ0gsT0FGRCxDQUVFLGdCQUFNO0FBQ0osY0FBTSxJQUFJQyxLQUFKLENBQ0QsY0FBYVIsV0FBWSw4QkFBNkIsS0FBS00sUUFBUyxnQ0FEbkUsQ0FBTjtBQUVIO0FBRUQ7Ozs7O0FBR0EsWUFBTUcsT0FBTyxHQUFHLE1BQU0sS0FBS0MsTUFBTCxDQUFZQyxDQUFaLENBQWMsS0FBS0wsUUFBbkIsQ0FBdEI7QUFDQSxXQUFLSCxTQUFMLEdBQWlCTSxPQUFPLENBQUNOLFNBQXpCO0FBQ0g7O0FBRUQsUUFBSTtBQUNBLGFBQU8sTUFBTUosRUFBRSxDQUFDQyxXQUFELEVBQWNDLFNBQWQsQ0FBRixDQUEyQlcsS0FBM0IsQ0FBaUMsSUFBakMsRUFBdUNWLElBQXZDLENBQWI7QUFDSCxLQUZELENBRUUsT0FBTVcsS0FBTixFQUFhO0FBQ1gsVUFBSUEsS0FBSyxDQUFDQyxPQUFOLENBQWNDLFFBQWQsQ0FBdUIseUJBQXZCLENBQUosRUFBdUQ7QUFDbkQsY0FBTU4sT0FBTyxHQUFHLE1BQU0sNkJBQWUsSUFBZixDQUF0QjtBQUNBLGFBQUtOLFNBQUwsR0FBaUJNLE9BQU8sQ0FBQ04sU0FBekI7QUFDQSxhQUFLTyxNQUFMLEdBQWNELE9BQU8sQ0FBQ0MsTUFBdEI7QUFFQSxlQUFPLE1BQU1YLEVBQUUsQ0FBQ0MsV0FBRCxFQUFjQyxTQUFkLENBQUYsQ0FBMkJXLEtBQTNCLENBQWlDLElBQWpDLEVBQXVDVixJQUF2QyxDQUFiO0FBQ0g7O0FBQ0QsWUFBTVcsS0FBTjtBQUNIO0FBQ0osR0F6Q0Q7QUEwQ0gsQ0EzQ007QUE2Q1A7Ozs7Ozs7QUFHTyxNQUFNRyxrQkFBa0IsR0FBSUMsV0FBRCxJQUFrQmpCLFdBQUQsSUFBaUI7QUFDaEUsU0FBT2lCLFdBQVcsQ0FBQ2pCLFdBQUQsRUFBYyxVQUFVLEdBQUdFLElBQWIsRUFBbUI7QUFDL0MsVUFBTWdCLGNBQWMsR0FBRyxLQUFLQyxTQUFMLENBQWVDLEdBQWYsQ0FBb0JDLFlBQUQsSUFBa0I7QUFDeEQsYUFBTyxLQUFLQSxZQUFMLEVBQW1CckIsV0FBbkIsRUFBZ0MsR0FBR0UsSUFBbkMsQ0FBUDtBQUNILEtBRnNCLENBQXZCO0FBSUEsV0FBT29CLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxjQUFaLENBQVA7QUFDSCxHQU5pQixDQUFsQjtBQU9ILENBUk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcbmltcG9ydCByZWZldGNoRWxlbWVudCBmcm9tICcuL3V0aWxzL3JlZmV0Y2hFbGVtZW50J1xuXG5jb25zdCBsb2cgPSBsb2dnZXIoJ3dlYmRyaXZlcmlvJylcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBhbiBjb21tYW5kIHdyYXBwZXIgZm9yIGVsZW1lbnRzIHRoYXQgY2hlY2tzIGlmIGEgY29tbWFuZCBpcyBjYWxsZWRcbiAqIHRoYXQgd2Fzbid0IGZvdW5kIG9uIHRoZSBwYWdlIGFuZCBhdXRvbWF0aWNhbGx5IHdhaXRzIGZvciBpdFxuICpcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgY29tbWFuZFdyYXAgZnJvbSB3ZGlvLXN5bmMgcGFja2FnZSAob3Igc2hpbSBpZiBub3QgcnVubmluZyBpbiBzeW5jKVxuICovXG5leHBvcnQgY29uc3QgZWxlbWVudEVycm9ySGFuZGxlciA9IChmbikgPT4gKGNvbW1hbmROYW1lLCBjb21tYW5kRm4pID0+IHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHdhaXQgb24gZWxlbWVudCBpZjpcbiAgICAgICAgICogIC0gZWxlbWVudElkIGNvdWxkbid0IGJlIGZldGNoZWQgaW4gdGhlIGZpcnN0IHBsYWNlXG4gICAgICAgICAqICAtIGNvbW1hbmQgaXMgbm90IGV4cGxpY2l0IHdhaXQgY29tbWFuZCBmb3IgZXhpc3RhbmNlIG9yIGRpc3BsYXllZG5lc3NcbiAgICAgICAgICovXG4gICAgICAgIGlmICghdGhpcy5lbGVtZW50SWQgJiYgIWNvbW1hbmROYW1lLm1hdGNoKC8od2FpdChVbnRpbHxGb3JEaXNwbGF5ZWR8Rm9yRXhpc3R8Rm9yRW5hYmxlZCl8aXNFeGlzdGluZykvKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFxuICAgICAgICAgICAgICAgIGBjb21tYW5kICR7Y29tbWFuZE5hbWV9IHdhcyBjYWxsZWQgb24gYW4gZWxlbWVudCAoXCIke3RoaXMuc2VsZWN0b3J9XCIpIGAgK1xuICAgICAgICAgICAgICAgICd0aGF0IHdhc25cXCd0IGZvdW5kLCB3YWl0aW5nIGZvciBpdC4uLidcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBjcmVhdGUgbmV3IHByb21pc2Ugc28gd2UgY2FuIGFwcGx5IGEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgaW4gY2FzZXMgd2FpdEZvckV4aXN0IGZhaWxzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yRXhpc3QoKVxuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgQ2FuJ3QgY2FsbCAke2NvbW1hbmROYW1lfSBvbiBlbGVtZW50IHdpdGggc2VsZWN0b3IgXCIke3RoaXMuc2VsZWN0b3J9XCIgYmVjYXVzZSBlbGVtZW50IHdhc24ndCBmb3VuZGApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogaWYgd2FpdEZvckV4aXN0IHdhcyBzdWNjZXNzZnVsIHJlcXVlcnkgZWxlbWVudCBhbmQgYXNzaWduIGVsZW1lbnRJZCB0byB0aGUgc2NvcGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGF3YWl0IHRoaXMucGFyZW50LiQodGhpcy5zZWxlY3RvcilcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudElkID0gZWxlbWVudC5lbGVtZW50SWRcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZm4oY29tbWFuZE5hbWUsIGNvbW1hbmRGbikuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3N0YWxlIGVsZW1lbnQgcmVmZXJlbmNlJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gYXdhaXQgcmVmZXRjaEVsZW1lbnQodGhpcylcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJZCA9IGVsZW1lbnQuZWxlbWVudElkXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBlbGVtZW50LnBhcmVudFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZuKGNvbW1hbmROYW1lLCBjb21tYW5kRm4pLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIGhhbmRsZSBzaW5nbGUgY29tbWFuZCBjYWxscyBmcm9tIG11bHRpcmVtb3RlIGluc3RhbmNlc1xuICovXG5leHBvcnQgY29uc3QgbXVsdGlyZW1vdGVIYW5kbGVyID0gKHdyYXBDb21tYW5kKSA9PiAoY29tbWFuZE5hbWUpID0+IHtcbiAgICByZXR1cm4gd3JhcENvbW1hbmQoY29tbWFuZE5hbWUsIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmRSZXN1bHRzID0gdGhpcy5pbnN0YW5jZXMubWFwKChpbnN0YW5jZU5hbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW2luc3RhbmNlTmFtZV1bY29tbWFuZE5hbWVdKC4uLmFyZ3MpXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGNvbW1hbmRSZXN1bHRzKVxuICAgIH0pXG59XG4iXX0=