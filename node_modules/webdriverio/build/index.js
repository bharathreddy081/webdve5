"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiremote = exports.attach = exports.remote = void 0;

require("source-map-support/register");

var _webdriver = _interopRequireDefault(require("webdriver"));

var _config = require("@wdio/config");

var _multiremote = _interopRequireDefault(require("./multiremote"));

var _constants = require("./constants");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A method to create a new session with WebdriverIO
 *
 * @param  {Object} [params={}]       Options to create the session with
 * @param  {function} remoteModifier  Modifier function to change the monad object
 * @return {object}                   browser object with sessionId
 */
const remote = function (params = {}, remoteModifier) {
  const config = (0, _config.validateConfig)(_constants.WDIO_DEFAULTS, params);

  const modifier = (client, options) => {
    if (typeof remoteModifier === 'function') {
      client = remoteModifier(client, Object.assign(options, config));
    }

    Object.assign(options, config);
    return client;
  };

  if (params.user && params.key) {
    params = Object.assign({}, (0, _config.detectBackend)(params), params);
  }

  const prototype = (0, _utils.getPrototype)('browser');
  /**
   * apply mobile check flags to browser scope
   */

  const mobileDetection = (0, _utils.mobileDetector)(params.capabilities);
  Object.assign(prototype, Object.keys(mobileDetection).reduce((proto, flag) => {
    proto[flag] = {
      value: mobileDetection[flag]
    };
    return proto;
  }, {}));
  return _webdriver.default.newSession(params, modifier, prototype, _config.wrapCommand);
};

exports.remote = remote;

const attach = function (params) {
  const prototype = (0, _utils.getPrototype)('browser');
  return _webdriver.default.attachToSession(params, null, prototype, _config.wrapCommand);
};

exports.attach = attach;

const multiremote = async function (params = {}) {
  const multibrowser = new _multiremote.default();
  const browserNames = Object.keys(params);
  /**
   * create all instance sessions
   */

  await Promise.all(browserNames.map(browserName => {
    (0, _config.validateConfig)(_constants.WDIO_DEFAULTS, params[browserName]);
    const prototype = (0, _utils.getPrototype)('browser');

    const instance = _webdriver.default.newSession(params[browserName], null, prototype, _config.wrapCommand);

    return multibrowser.addInstance(browserName, instance);
  }));
  /**
   * use attachToSession capability to wrap instances around blank pod
   */

  const prototype = (0, _utils.getPrototype)('browser');
  const sessionParams = {
    sessionId: '',
    isW3C: multibrowser.instances[browserNames[0]].isW3C
  };

  const driver = _webdriver.default.attachToSession(sessionParams, multibrowser.modifier.bind(multibrowser), prototype, _config.wrapCommand);
  /**
   * in order to get custom command added to multiremote instance we need to pass
   * in the prototype of the multibrowser
   */


  const origAddCommand = driver.addCommand.bind(driver);

  driver.addCommand = (name, fn) => {
    origAddCommand(name, fn, Object.getPrototypeOf(multibrowser.baseInstance));
  };

  return driver;
};

exports.multiremote = multiremote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZW1vdGUiLCJwYXJhbXMiLCJyZW1vdGVNb2RpZmllciIsImNvbmZpZyIsIldESU9fREVGQVVMVFMiLCJtb2RpZmllciIsImNsaWVudCIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ1c2VyIiwia2V5IiwicHJvdG90eXBlIiwibW9iaWxlRGV0ZWN0aW9uIiwiY2FwYWJpbGl0aWVzIiwia2V5cyIsInJlZHVjZSIsInByb3RvIiwiZmxhZyIsInZhbHVlIiwiV2ViRHJpdmVyIiwibmV3U2Vzc2lvbiIsIndyYXBDb21tYW5kIiwiYXR0YWNoIiwiYXR0YWNoVG9TZXNzaW9uIiwibXVsdGlyZW1vdGUiLCJtdWx0aWJyb3dzZXIiLCJNdWx0aVJlbW90ZSIsImJyb3dzZXJOYW1lcyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJicm93c2VyTmFtZSIsImluc3RhbmNlIiwiYWRkSW5zdGFuY2UiLCJzZXNzaW9uUGFyYW1zIiwic2Vzc2lvbklkIiwiaXNXM0MiLCJpbnN0YW5jZXMiLCJkcml2ZXIiLCJvcmlnQWRkQ29tbWFuZCIsImFkZENvbW1hbmQiLCJuYW1lIiwiZm4iLCJnZXRQcm90b3R5cGVPZiIsImJhc2VJbnN0YW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTs7Ozs7OztBQU9PLE1BQU1BLE1BQU0sR0FBRyxVQUFVQyxNQUFNLEdBQUcsRUFBbkIsRUFBdUJDLGNBQXZCLEVBQXVDO0FBQ3pELFFBQU1DLE1BQU0sR0FBRyw0QkFBZUMsd0JBQWYsRUFBOEJILE1BQTlCLENBQWY7O0FBQ0EsUUFBTUksUUFBUSxHQUFHLENBQUNDLE1BQUQsRUFBU0MsT0FBVCxLQUFxQjtBQUNsQyxRQUFJLE9BQU9MLGNBQVAsS0FBMEIsVUFBOUIsRUFBMEM7QUFDdENJLE1BQUFBLE1BQU0sR0FBR0osY0FBYyxDQUFDSSxNQUFELEVBQVNFLE1BQU0sQ0FBQ0Ms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QUFQLEdBQW9CLENBQUNDLElBQUQsRUFBT0MsRUFBUCxLQUFjO0FBQzlCSCxJQUFBQSxjQUFjLENBQUNFLElBQUQsRUFBT0MsRUFBUCxFQUFXbkMsTUFBTSxDQUFDb0MsY0FBUCxDQUFzQmxCLFlBQVksQ0FBQ21CLFlBQW5DLENBQVgsQ0FBZDtBQUNILEdBRkQ7O0FBSUEsU0FBT04sTUFBUDtBQUNILENBcENNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYkRyaXZlciBmcm9tICd3ZWJkcml2ZXInXG5pbXBvcnQgeyB2YWxpZGF0ZUNvbmZpZywgd3JhcENvbW1hbmQsIGRldGVjdEJhY2tlbmQgfSBmcm9tICdAd2Rpby9jb25maWcnXG5cbmltcG9ydCBNdWx0aVJlbW90ZSBmcm9tICcuL211bHRpcmVtb3RlJ1xuaW1wb3J0IHsgV0RJT19ERUZBVUxUUyB9IGZyb20gJy4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgZ2V0UHJvdG90eXBlLCBtb2JpbGVEZXRlY3RvciB9IGZyb20gJy4vdXRpbHMnXG5cbi8qKlxuICogQSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IHNlc3Npb24gd2l0aCBXZWJkcml2ZXJJT1xuICpcbiAqIEBwYXJhbSAge09iamVjdH0gW3BhcmFtcz17fV0gICAgICAgT3B0aW9ucyB0byBjcmVhdGUgdGhlIHNlc3Npb24gd2l0aFxuICogQHBhcmFtICB7ZnVuY3Rpb259IHJlbW90ZU1vZGlmaWVyICBNb2RpZmllciBmdW5jdGlvbiB0byBjaGFuZ2UgdGhlIG1vbmFkIG9iamVjdFxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgICAgICBicm93c2VyIG9iamVjdCB3aXRoIHNlc3Npb25JZFxuICovXG5leHBvcnQgY29uc3QgcmVtb3RlID0gZnVuY3Rpb24gKHBhcmFtcyA9IHt9LCByZW1vdGVNb2RpZmllcikge1xuICAgIGNvbnN0IGNvbmZpZyA9IHZhbGlkYXRlQ29uZmlnKFdESU9fREVGQVVMVFMsIHBhcmFtcylcbiAgICBjb25zdCBtb2RpZmllciA9IChjbGllbnQsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiByZW1vdGVNb2RpZmllciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2xpZW50ID0gcmVtb3RlTW9kaWZpZXIoY2xpZW50LCBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGNvbmZpZykpXG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIGNvbmZpZylcbiAgICAgICAgcmV0dXJuIGNsaWVudFxuICAgIH1cblxuICAgIGlmIChwYXJhbXMudXNlciAmJiBwYXJhbXMua2V5KSB7XG4gICAgICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIGRldGVjdEJhY2tlbmQocGFyYW1zKSwgcGFyYW1zKVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZSgnYnJvd3NlcicpXG5cbiAgICAvKipcbiAgICAgKiBhcHBseSBtb2JpbGUgY2hlY2sgZmxhZ3MgdG8gYnJvd3NlciBzY29wZVxuICAgICAqL1xuICAgIGNvbnN0IG1vYmlsZURldGVjdGlvbiA9IG1vYmlsZURldGVjdG9yKHBhcmFtcy5jYXBhYmlsaXRpZXMpXG4gICAgT2JqZWN0LmFzc2lnbihwcm90b3R5cGUsIE9iamVjdC5rZXlzKG1vYmlsZURldGVjdGlvbikucmVkdWNlKChwcm90bywgZmxhZykgPT4ge1xuICAgICAgICBwcm90b1tmbGFnXSA9IHsgdmFsdWU6IG1vYmlsZURldGVjdGlvbltmbGFnXSB9XG4gICAgICAgIHJldHVybiBwcm90b1xuICAgIH0sIHt9KSlcblxuICAgIHJldHVybiBXZWJEcml2ZXIubmV3U2Vzc2lvbihwYXJhbXMsIG1vZGlmaWVyLCBwcm90b3R5cGUsIHdyYXBDb21tYW5kKVxufVxuXG5leHBvcnQgY29uc3QgYXR0YWNoID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZSgnYnJvd3NlcicpXG4gICAgcmV0dXJuIFdlYkRyaXZlci5hdHRhY2hUb1Nlc3Npb24ocGFyYW1zLCBudWxsLCBwcm90b3R5cGUsIHdyYXBDb21tYW5kKVxufVxuXG5leHBvcnQgY29uc3QgbXVsdGlyZW1vdGUgPSBhc3luYyBmdW5jdGlvbiAocGFyYW1zID0ge30pIHtcbiAgICBjb25zdCBtdWx0aWJyb3dzZXIgPSBuZXcgTXVsdGlSZW1vdGUoKVxuICAgIGNvbnN0IGJyb3dzZXJOYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtcylcblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhbGwgaW5zdGFuY2Ugc2Vzc2lvbnNcbiAgICAgKi9cbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgYnJvd3Nlck5hbWVzLm1hcCgoYnJvd3Nlck5hbWUpID0+IHtcbiAgICAgICAgICAgIHZhbGlkYXRlQ29uZmlnKFdESU9fREVGQVVMVFMsIHBhcmFtc1ticm93c2VyTmFtZV0pXG4gICAgICAgICAgICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGUoJ2Jyb3dzZXInKVxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBXZWJEcml2ZXIubmV3U2Vzc2lvbihwYXJhbXNbYnJvd3Nlck5hbWVdLCBudWxsLCBwcm90b3R5cGUsIHdyYXBDb21tYW5kKVxuICAgICAgICAgICAgcmV0dXJuIG11bHRpYnJvd3Nlci5hZGRJbnN0YW5jZShicm93c2VyTmFtZSwgaW5zdGFuY2UpXG4gICAgICAgIH0pXG4gICAgKVxuXG4gICAgLyoqXG4gICAgICogdXNlIGF0dGFjaFRvU2Vzc2lvbiBjYXBhYmlsaXR5IHRvIHdyYXAgaW5zdGFuY2VzIGFyb3VuZCBibGFuayBwb2RcbiAgICAgKi9cbiAgICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGUoJ2Jyb3dzZXInKVxuICAgIGNvbnN0IHNlc3Npb25QYXJhbXMgPSB7XG4gICAgICAgIHNlc3Npb25JZDogJycsXG4gICAgICAgIGlzVzNDOiBtdWx0aWJyb3dzZXIuaW5zdGFuY2VzW2Jyb3dzZXJOYW1lc1swXV0uaXNXM0NcbiAgICB9XG4gICAgY29uc3QgZHJpdmVyID0gV2ViRHJpdmVyLmF0dGFjaFRvU2Vzc2lvbihzZXNzaW9uUGFyYW1zLCA6Om11bHRpYnJvd3Nlci5tb2RpZmllciwgcHJvdG90eXBlLCB3cmFwQ29tbWFuZClcblxuICAgIC8qKlxuICAgICAqIGluIG9yZGVyIHRvIGdldCBjdXN0b20gY29tbWFuZCBhZGRlZCB0byBtdWx0aXJlbW90ZSBpbnN0YW5jZSB3ZSBuZWVkIHRvIHBhc3NcbiAgICAgKiBpbiB0aGUgcHJvdG90eXBlIG9mIHRoZSBtdWx0aWJyb3dzZXJcbiAgICAgKi9cbiAgICBjb25zdCBvcmlnQWRkQ29tbWFuZCA9IDo6ZHJpdmVyLmFkZENvbW1hbmRcbiAgICBkcml2ZXIuYWRkQ29tbWFuZCA9IChuYW1lLCBmbikgPT4ge1xuICAgICAgICBvcmlnQWRkQ29tbWFuZChuYW1lLCBmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG11bHRpYnJvd3Nlci5iYXNlSW5zdGFuY2UpKVxuICAgIH1cblxuICAgIHJldHVybiBkcml2ZXJcbn1cbiJdfQ==