"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = debug;

require("source-map-support/register");

var _serializeError = _interopRequireDefault(require("serialize-error"));

var _repl = _interopRequireDefault(require("@wdio/repl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function debug(commandTimeout = 5000) {
  const repl = new _repl.default();
  const {
    introMessage
  } = _repl.default;
  /**
   * run repl in standalone mode
   */

  if (!process.env.WDIO_WORKER) {
    // eslint-disable-next-line
    console.log(_repl.default.introMessage);
    const context = {
      browser: this,
      driver: this,
      $: this.$.bind(this),
      $$: this.$$.bind(this)
    };
    return repl.start(context);
  }
  /**
   * register worker process as debugger target
   */


  process._debugProcess(process.pid);
  /**
   * initialise repl in testrunner
   */


  process.send({
    origin: 'debugger',
    name: 'start',
    params: {
      commandTimeout,
      introMessage
    }
  });

  let commandResolve =
  /* istanbul ignore next */
  () => {};

  process.on('message', m => {
    if (m.origin !== 'debugger') {
      return;
    }

    if (m.name === 'stop') {
      process._debugEnd(process.pid);

      return commandResolve();
    }
    /* istanbul ignore if */


    if (m.name === 'eval') {
      repl.eval(m.content.cmd, global, null, (e, result) => {
        if (e) {
          process.send({
            origin: 'debugger',
            name: 'result',
            params: _objectSpread({
              error: true
            }, (0, _serializeError.default)(e))
          });
        }
        /**
         * try to do some smart serializations
         */


        if (typeof result === 'function') {
          result = `[Function: ${result.name}]`;
        }

        process.send({
          origin: 'debugger',
          name: 'result',
          params: {
            result
          }
        });
      });
    }
  });
  return new Promise(resolve => commandResolve = resolve);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL2RlYnVnLmpzIl0sIm5hbWVzIjpbImRlYnVnIiwiY29tbWFuZFRpbWVvdXQiLCJyZXBsIiwiV0RJT1JlcGwiLCJpbnRyb01lc3NhZ2UiLCJwcm9jZXNzIiwiZW52IiwiV0RJT19XT1JLRVIiLCJjb25zb2xlIiwibG9nIiwiY29udGV4dCIsImJyb3dzZXIiLCJkcml2ZXIiLCIkIiwiJCQiLCJzdGFydCIsIl9kZWJ1Z1Byb2Nlc3MiLCJwaWQiLCJzZW5kIiwib3JpZ2luIiwibmFtZSIsInBhcmFtcyIsImNvbW1hbmRSZXNvbHZlIiwib24iLCJtIiwiX2RlYnVnRW5kIiwiZXZhbCIsImNvbnRlbnQiLCJjbWQiLCJnbG9iYWwiLCJlIiwicmVzdWx0IiwiZXJyb3IiLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZ0NBOztBQUNBOzs7Ozs7OztBQUVlLFNBQVNBLEtBQVQsQ0FBZUMsY0FBYyxHQUFHLElBQWhDLEVBQXNDO0FBQ2pELFFBQU1DLElBQUksR0FBRyxJQUFJQyxhQUFKLEVBQWI7QUFDQSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBbUJELGFBQXpCO0FBRUE7Ozs7QUFHQSxNQUFJLENBQUNFLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxXQUFqQixFQUE4QjtBQUMxQjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWU4sY0FBU0MsWUFBckI7QUFDQSxVQUFNTSxPQUFPLEdBQUc7QUFDWkMsTUFBQUEsT0FBTyxFQUFFLElBREc7QUFFWkMsTUFBQUEsTUFBTSxFQUFFLElBRkk7QUFHWkMsTUFBQUEsQ0FBQyxFQUFJLEtBQUtBLENBQVQsTUFBSSxJQUFKLENBSFc7QUFJWkMsTUFBQUEsRUFBRSxFQUFJLEtBQUtBLEVBQVQsTUFBSSxJQUFKO0FBSlUsS0FBaEI7QUFNQSxXQUFPWixJQUFJLENBQUNhLEtBQUwsQ0FBV0wsT0FBWCxDQUFQO0FBQ0g7QUFFRDs7Ozs7QUFHQUwsRUFBQUEsT0FBTyxDQUFDVyxhQUFSLENBQXNCWCxPQUFPLENBQUNZLEdBQTlCO0FBRUE7Ozs7O0FBR0FaLEVBQUFBLE9BQU8sQ0FBQ2EsSUFBUixDQUFhO0FBQ1RDLElBQUFBLE1BQU0sRUFBRSxVQURDO0FBRVRDLElBQUFBLElBQUksRUFBRSxPQUZHO0FBR1RDLElBQUFBLE1BQU0sRUFBRTtBQUFFcEIsTUFBQUEsY0FBRjtBQUFrQkcsTUFBQUE7QUFBbEI7QUFIQyxHQUFiOztBQU1BLE1BQUlrQixjQUFjO0FBQUc7QUFBMkIsUUFBTSxDQUFFLENBQXhEOztBQUNBakIsRUFBQUEsT0FBTyxDQUFDa0IsRUFBUixDQUFXLFNBQVgsRUFBdUJDLENBQUQsSUFBTztBQUN6QixRQUFJQSxDQUFDLENBQUNMLE1BQUYsS0FBYSxVQUFqQixFQUE2QjtBQUN6QjtBQUNIOztBQUVELFFBQUlLLENBQUMsQ0FBQ0osSUFBRixLQUFXLE1BQWYsRUFBdUI7QUFDbkJmLE1BQUFBLE9BQU8sQ0FBQ29CLFNBQVIsQ0FBa0JwQixPQUFPLENBQUNZLEdBQTFCOztBQUNBLGFBQU9LLGNBQWMsRUFBckI7QUFDSDtBQUVEOzs7QUFDQSxRQUFJRSxDQUFDLENBQUNKLElBQUYsS0FBVyxNQUFmLEVBQXVCO0FBQ25CbEIsTUFBQUEsSUFBSSxDQUFDd0IsSUFBTCxDQUFVRixDQUFDLENBQUNHLE9BQUYsQ0FBVUMsR0FBcEIsRUFBeUJDLE1BQXpCLEVBQWlDLElBQWpDLEVBQXVDLENBQUNDLENBQUQsRUFBSUMsTUFBSixLQUFlO0FBQ2xELFlBQUlELENBQUosRUFBTztBQUNIekIsVUFBQUEsT0FBTyxDQUFDYSxJQUFSLENBQWE7QUFDVEMsWUFBQUEsTUFBTSxFQUFFLFVBREM7QUFFVEMsWUFBQUEsSUFBSSxFQUFFLFFBRkc7QUFHVEMsWUFBQUEsTUFBTTtBQUNGVyxjQUFBQSxLQUFLLEVBQUU7QUFETCxlQUVDLDZCQUFlRixDQUFmLENBRkQ7QUFIRyxXQUFiO0FBUUg7QUFFRDs7Ozs7QUFHQSxZQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBdEIsRUFBa0M7QUFDOUJBLFVBQUFBLE1BQU0sR0FBSSxjQUFhQSxNQUFNLENBQUNYLElBQUssR0FBbkM7QUFDSDs7QUFFRGYsUUFBQUEsT0FBTyxDQUFDYSxJQUFSLENBQWE7QUFDVEMsVUFBQUEsTUFBTSxFQUFFLFVBREM7QUFFVEMsVUFBQUEsSUFBSSxFQUFFLFFBRkc7QUFHVEMsVUFBQUEsTUFBTSxFQUFFO0FBQUVVLFlBQUFBO0FBQUY7QUFIQyxTQUFiO0FBS0gsT0F4QkQ7QUF5Qkg7QUFDSixHQXRDRDtBQXdDQSxTQUFPLElBQUlFLE9BQUosQ0FBYUMsT0FBRCxJQUFjWixjQUFjLEdBQUdZLE9BQTNDLENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKlxuICogVGhpcyBjb21tYW5kIGhlbHBzIHlvdSB0byBkZWJ1ZyB5b3VyIGludGVncmF0aW9uIHRlc3RzLiBJdCBzdG9wcyB0aGUgcnVubmluZyBicm93c2VyIGFuZCBnaXZlc1xuICogeW91IHRpbWUgdG8ganVtcCBpbnRvIGl0IGFuZCBjaGVjayB0aGUgc3RhdGUgb2YgeW91ciBhcHBsaWNhdGlvbiAoZS5nLiB1c2luZyBkZXYgdG9vbHMpLlxuICogWW91ciB0ZXJtaW5hbCB0cmFuc2Zvcm1zIGludG8gYSBbUkVQTF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVhZCVFMiU4MCU5M2V2YWwlRTIlODAlOTNwcmludF9sb29wKVxuICogaW50ZXJmYWNlIHRoYXQgd2lsbCBhbGxvdyB5b3UgdG8gdHJ5IG91dCBjZXJ0YWluIGNvbW1hbmRzLCBmaW5kIGVsZW1lbnRzIGFuZCB0ZXN0IGFjdGlvbnMgb25cbiAqIHRoZW0uXG4gKlxuICogWyFbV2ViZHJpdmVySU8gUkVQTF0oaHR0cDovL3dlYmRyaXZlci5pby9pbWFnZXMvcmVwbC5naWYpXShodHRwOi8vd2ViZHJpdmVyLmlvL2ltYWdlcy9yZXBsLmdpZilcbiAqXG4gKiBJZiB5b3UgcnVuIHRoZSBXRElPIHRlc3RydW5uZXIgbWFrZSBzdXJlIHlvdSBpbmNyZWFzZSB0aGUgdGltZW91dCBwcm9wZXJ0eSBvZiB0aGUgdGVzdCBmcmFtZXdvcmtcbiAqIHlvdSBhcmUgdXNpbmcgKGUuZy4gTW9jaGEgb3IgSmFzbWluZSkgaW4gb3JkZXIgdG8gcHJldmVudCB0ZXN0IHRlcm1pbmF0aW9uIGR1ZSB0byBhIHRlc3QgdGltZW91dC5cbiAqIEFsc28gYXZvaWQgZXhlY3V0aW5nIHRoZSBjb21tYW5kIHdpdGggbXVsdGlwbGUgY2FwYWJpbGl0aWVzIHJ1bm5pbmcgYXQgdGhlIHNhbWUgdGltZS5cbiAqXG4gKiA8aWZyYW1lIHdpZHRoPVwiNTYwXCIgaGVpZ2h0PVwiMzE1XCIgc3JjPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQveFd3UC0zQl9ZeUVcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+XG4gKlxuICogPGV4YW1wbGU+XG4gICAgOmRlYnVnLmpzXG4gICAgaXQoJ3Nob3VsZCBkZW1vbnN0cmF0ZSB0aGUgZGVidWcgY29tbWFuZCcsICgpID0+IHtcbiAgICAgICAgJCgnI2lucHV0Jykuc2V0VmFsdWUoJ0ZPTycpXG4gICAgICAgIGJyb3dzZXIuZGVidWcoKSAvLyBqdW1waW5nIGludG8gdGhlIGJyb3dzZXIgYW5kIGNoYW5nZSB2YWx1ZSBvZiAjaW5wdXQgdG8gJ0JBUidcbiAgICAgICAgY29uc3QgdmFsdWUgPSAkKCcjaW5wdXQnKS5nZXRWYWx1ZSgpXG4gICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKSAvLyBvdXRwdXRzOiBcIkJBUlwiXG4gICAgfSlcbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAYWxpYXMgYnJvd3Nlci5kZWJ1Z1xuICogQHR5cGUgdXRpbGl0eVxuICpcbiAqL1xuXG5pbXBvcnQgc2VyaWFsaXplRXJyb3IgZnJvbSAnc2VyaWFsaXplLWVycm9yJ1xuaW1wb3J0IFdESU9SZXBsIGZyb20gJ0B3ZGlvL3JlcGwnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYnVnKGNvbW1hbmRUaW1lb3V0ID0gNTAwMCkge1xuICAgIGNvbnN0IHJlcGwgPSBuZXcgV0RJT1JlcGwoKVxuICAgIGNvbnN0IHsgaW50cm9NZXNzYWdlIH0gPSBXRElPUmVwbFxuXG4gICAgLyoqXG4gICAgICogcnVuIHJlcGwgaW4gc3RhbmRhbG9uZSBtb2RlXG4gICAgICovXG4gICAgaWYgKCFwcm9jZXNzLmVudi5XRElPX1dPUktFUikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc29sZS5sb2coV0RJT1JlcGwuaW50cm9NZXNzYWdlKVxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICAgICAgYnJvd3NlcjogdGhpcyxcbiAgICAgICAgICAgIGRyaXZlcjogdGhpcyxcbiAgICAgICAgICAgICQ6IDo6dGhpcy4kLFxuICAgICAgICAgICAgJCQ6IDo6dGhpcy4kJFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXBsLnN0YXJ0KGNvbnRleHQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVnaXN0ZXIgd29ya2VyIHByb2Nlc3MgYXMgZGVidWdnZXIgdGFyZ2V0XG4gICAgICovXG4gICAgcHJvY2Vzcy5fZGVidWdQcm9jZXNzKHByb2Nlc3MucGlkKVxuXG4gICAgLyoqXG4gICAgICogaW5pdGlhbGlzZSByZXBsIGluIHRlc3RydW5uZXJcbiAgICAgKi9cbiAgICBwcm9jZXNzLnNlbmQoe1xuICAgICAgICBvcmlnaW46ICdkZWJ1Z2dlcicsXG4gICAgICAgIG5hbWU6ICdzdGFydCcsXG4gICAgICAgIHBhcmFtczogeyBjb21tYW5kVGltZW91dCwgaW50cm9NZXNzYWdlIH1cbiAgICB9KVxuXG4gICAgbGV0IGNvbW1hbmRSZXNvbHZlID0gLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gKCkgPT4ge31cbiAgICBwcm9jZXNzLm9uKCdtZXNzYWdlJywgKG0pID0+IHtcbiAgICAgICAgaWYgKG0ub3JpZ2luICE9PSAnZGVidWdnZXInKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtLm5hbWUgPT09ICdzdG9wJykge1xuICAgICAgICAgICAgcHJvY2Vzcy5fZGVidWdFbmQocHJvY2Vzcy5waWQpXG4gICAgICAgICAgICByZXR1cm4gY29tbWFuZFJlc29sdmUoKVxuICAgICAgICB9XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChtLm5hbWUgPT09ICdldmFsJykge1xuICAgICAgICAgICAgcmVwbC5ldmFsKG0uY29udGVudC5jbWQsIGdsb2JhbCwgbnVsbCwgKGUsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3Muc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46ICdkZWJ1Z2dlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmVzdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnNlcmlhbGl6ZUVycm9yKGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogdHJ5IHRvIGRvIHNvbWUgc21hcnQgc2VyaWFsaXphdGlvbnNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBgW0Z1bmN0aW9uOiAke3Jlc3VsdC5uYW1lfV1gXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiAnZGVidWdnZXInLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncmVzdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IHJlc3VsdCB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiAoY29tbWFuZFJlc29sdmUgPSByZXNvbHZlKSlcbn1cbiJdfQ==