"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = url;

require("source-map-support/register");

var _url = _interopRequireDefault(require("url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * Protocol binding to load or get the URL of the browser. If a baseUrl is
 * specified in the config, it will be prepended to the url parameter using
 * node's url.resolve() method.
 *
 * <example>
    :url.js
    // navigate to a new URL
    browser.url('http://webdriver.io');
    // receive url
    console.log(browser.getCurrentUrl()); // outputs: "http://webdriver.io"

    :baseUrlResolutions.js
    // With a base URL of http://example.com/site, the following url parameters resolve as such:
    // When providing a scheme:
    // http://webdriver.io
    browser.url('http://webdriver.io');
    // When not starting with a slash, the URL resolves relative to the baseUrl
    // http://example.com/site/relative
    browser.url('relative');
    // When starting with a slash, the URL resolves relative to the root path of the baseUrl
    // http://example.com/rootRelative
    browser.url('/rootRelative');
 * </example>
 *
 * @param {String=} url  the URL to navigate to
 * @return {String}     the current URL
 *
 * @see  https://w3c.github.io/webdriver/webdriver-spec.html#dfn-get
 * @see  https://nodejs.org/api/url.html#url_url_resolve_from_to
 * @type protocol
 *
 */
function url(path) {
  if (typeof path !== 'string') {
    throw new Error('Parameter for "url" command needs to be type of string');
  }

  if (typeof this.options.baseUrl === 'string') {
    path = _url.default.resolve(this.options.baseUrl, path);
  }

  return this.navigateTo(path);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL3VybC5qcyJdLCJuYW1lcyI6WyJ1cmwiLCJwYXRoIiwiRXJyb3IiLCJvcHRpb25zIiwiYmFzZVVybCIsIm5vZGVVcmwiLCJyZXNvbHZlIiwibmF2aWdhdGVUbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBbUNBOzs7O0FBbkNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUNlLFNBQVNBLEdBQVQsQ0FBY0MsSUFBZCxFQUFvQjtBQUMvQixNQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDMUIsVUFBTSxJQUFJQyxLQUFKLENBQVUsd0RBQVYsQ0FBTjtBQUNIOztBQUVELE1BQUksT0FBTyxLQUFLQyxPQUFMLENBQWFDLE9BQXBCLEtBQWdDLFFBQXBDLEVBQThDO0FBQzFDSCxJQUFBQSxJQUFJLEdBQUdJLGFBQVFDLE9BQVIsQ0FBZ0IsS0FBS0gsT0FBTCxDQUFhQyxPQUE3QixFQUFzQ0gsSUFBdEMsQ0FBUDtBQUNIOztBQUVELFNBQU8sS0FBS00sVUFBTCxDQUFnQk4sSUFBaEIsQ0FBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogUHJvdG9jb2wgYmluZGluZyB0byBsb2FkIG9yIGdldCB0aGUgVVJMIG9mIHRoZSBicm93c2VyLiBJZiBhIGJhc2VVcmwgaXNcbiAqIHNwZWNpZmllZCBpbiB0aGUgY29uZmlnLCBpdCB3aWxsIGJlIHByZXBlbmRlZCB0byB0aGUgdXJsIHBhcmFtZXRlciB1c2luZ1xuICogbm9kZSdzIHVybC5yZXNvbHZlKCkgbWV0aG9kLlxuICpcbiAqIDxleGFtcGxlPlxuICAgIDp1cmwuanNcbiAgICAvLyBuYXZpZ2F0ZSB0byBhIG5ldyBVUkxcbiAgICBicm93c2VyLnVybCgnaHR0cDovL3dlYmRyaXZlci5pbycpO1xuICAgIC8vIHJlY2VpdmUgdXJsXG4gICAgY29uc29sZS5sb2coYnJvd3Nlci5nZXRDdXJyZW50VXJsKCkpOyAvLyBvdXRwdXRzOiBcImh0dHA6Ly93ZWJkcml2ZXIuaW9cIlxuXG4gICAgOmJhc2VVcmxSZXNvbHV0aW9ucy5qc1xuICAgIC8vIFdpdGggYSBiYXNlIFVSTCBvZiBodHRwOi8vZXhhbXBsZS5jb20vc2l0ZSwgdGhlIGZvbGxvd2luZyB1cmwgcGFyYW1ldGVycyByZXNvbHZlIGFzIHN1Y2g6XG4gICAgLy8gV2hlbiBwcm92aWRpbmcgYSBzY2hlbWU6XG4gICAgLy8gaHR0cDovL3dlYmRyaXZlci5pb1xuICAgIGJyb3dzZXIudXJsKCdodHRwOi8vd2ViZHJpdmVyLmlvJyk7XG4gICAgLy8gV2hlbiBub3Qgc3RhcnRpbmcgd2l0aCBhIHNsYXNoLCB0aGUgVVJMIHJlc29sdmVzIHJlbGF0aXZlIHRvIHRoZSBiYXNlVXJsXG4gICAgLy8gaHR0cDovL2V4YW1wbGUuY29tL3NpdGUvcmVsYXRpdmVcbiAgICBicm93c2VyLnVybCgncmVsYXRpdmUnKTtcbiAgICAvLyBXaGVuIHN0YXJ0aW5nIHdpdGggYSBzbGFzaCwgdGhlIFVSTCByZXNvbHZlcyByZWxhdGl2ZSB0byB0aGUgcm9vdCBwYXRoIG9mIHRoZSBiYXNlVXJsXG4gICAgLy8gaHR0cDovL2V4YW1wbGUuY29tL3Jvb3RSZWxhdGl2ZVxuICAgIGJyb3dzZXIudXJsKCcvcm9vdFJlbGF0aXZlJyk7XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQHBhcmFtIHtTdHJpbmc9fSB1cmwgIHRoZSBVUkwgdG8gbmF2aWdhdGUgdG9cbiAqIEByZXR1cm4ge1N0cmluZ30gICAgIHRoZSBjdXJyZW50IFVSTFxuICpcbiAqIEBzZWUgIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvd2ViZHJpdmVyLXNwZWMuaHRtbCNkZm4tZ2V0XG4gKiBAc2VlICBodHRwczovL25vZGVqcy5vcmcvYXBpL3VybC5odG1sI3VybF91cmxfcmVzb2x2ZV9mcm9tX3RvXG4gKiBAdHlwZSBwcm90b2NvbFxuICpcbiAqL1xuXG5pbXBvcnQgbm9kZVVybCBmcm9tICd1cmwnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVybCAocGF0aCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgZm9yIFwidXJsXCIgY29tbWFuZCBuZWVkcyB0byBiZSB0eXBlIG9mIHN0cmluZycpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmFzZVVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCA9IG5vZGVVcmwucmVzb2x2ZSh0aGlzLm9wdGlvbnMuYmFzZVVybCwgcGF0aClcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5uYXZpZ2F0ZVRvKHBhdGgpXG59XG4iXX0=