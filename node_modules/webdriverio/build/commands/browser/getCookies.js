"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getCookies;

require("source-map-support/register");

/**
 *
 * Retrieve a [cookie](https://w3c.github.io/webdriver/webdriver-spec.html#cookies)
 * visible to the current page. You can query a specific cookie by providing the cookie name or
 * retrieve all.
 *
 * <example>
    :getCookie.js
    it('should return a cookie for me', () => {
        browser.setCookie({name: 'test', value: '123'})
        browser.setCookie({name: 'test2', value: '456'})
        const testCookie = browser.getCookies(['test'])
        console.log(testCookie); // outputs: { name: 'test', value: '123' }

        const allCookies = browser.getCookies()
        console.log(allCookies);
        // outputs:
        // [
        //    { name: 'test', value: '123' },
        //    { name: 'test2', value: '456' }
        // ]
    })
 * </example>
 *
 * @alias browser.getCookie
 * @param {String[]=} names  names of requested cookies
 * @return {Object[]}        requested cookies if existing
 * @uses webdriver/getAllCookies
 *
 */
async function getCookies(names) {
  const namesList = typeof names !== 'undefined' && !Array.isArray(names) ? [names] : names;

  if (typeof namesList === 'undefined') {
    return this.getAllCookies();
  }

  if (namesList.every(obj => typeof obj !== 'string')) {
    throw new Error('Invalid input (see http://webdriver.io/docs/api/browser/getCookies.html for documentation.');
  }

  const allCookies = await this.getAllCookies();
  return allCookies.filter(cookie => namesList.includes(cookie.name));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9icm93c2VyL2dldENvb2tpZXMuanMiXSwibmFtZXMiOlsiZ2V0Q29va2llcyIsIm5hbWVzIiwibmFtZXNMaXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0QWxsQ29va2llcyIsImV2ZXJ5Iiwib2JqIiwiRXJyb3IiLCJhbGxDb29raWVzIiwiZmlsdGVyIiwiY29va2llIiwiaW5jbHVkZXMiLCJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJlLGVBQWVBLFVBQWYsQ0FBMEJDLEtBQTFCLEVBQWlDO0FBQzVDLFFBQU1DLFNBQVMsR0FBRyxPQUFPRCxLQUFQLEtBQWlCLFdBQWpCLElBQWdDLENBQUNFLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxLQUFkLENBQWpDLEdBQXdELENBQUNBLEtBQUQsQ0FBeEQsR0FBa0VBLEtBQXBGOztBQUVBLE1BQUksT0FBT0MsU0FBUCxLQUFxQixXQUF6QixFQUFzQztBQUNsQyxXQUFPLEtBQUtHLGFBQUwsRUFBUDtBQUNIOztBQUVELE1BQUlILFNBQVMsQ0FBQ0ksS0FBVixDQUFnQkMsR0FBRyxJQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUF0QyxDQUFKLEVBQXFEO0FBQ2pELFVBQU0sSUFBSUMsS0FBSixDQUFVLDRGQUFWLENBQU47QUFDSDs7QUFFRCxRQUFNQyxVQUFVLEdBQUcsTUFBTSxLQUFLSixhQUFMLEVBQXpCO0FBRUEsU0FBT0ksVUFBVSxDQUFDQyxNQUFYLENBQWtCQyxNQUFNLElBQUlULFNBQVMsQ0FBQ1UsUUFBVixDQUFtQkQsTUFBTSxDQUFDRSxJQUExQixDQUE1QixDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBSZXRyaWV2ZSBhIFtjb29raWVdKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvd2ViZHJpdmVyLXNwZWMuaHRtbCNjb29raWVzKVxuICogdmlzaWJsZSB0byB0aGUgY3VycmVudCBwYWdlLiBZb3UgY2FuIHF1ZXJ5IGEgc3BlY2lmaWMgY29va2llIGJ5IHByb3ZpZGluZyB0aGUgY29va2llIG5hbWUgb3JcbiAqIHJldHJpZXZlIGFsbC5cbiAqXG4gKiA8ZXhhbXBsZT5cbiAgICA6Z2V0Q29va2llLmpzXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBjb29raWUgZm9yIG1lJywgKCkgPT4ge1xuICAgICAgICBicm93c2VyLnNldENvb2tpZSh7bmFtZTogJ3Rlc3QnLCB2YWx1ZTogJzEyMyd9KVxuICAgICAgICBicm93c2VyLnNldENvb2tpZSh7bmFtZTogJ3Rlc3QyJywgdmFsdWU6ICc0NTYnfSlcbiAgICAgICAgY29uc3QgdGVzdENvb2tpZSA9IGJyb3dzZXIuZ2V0Q29va2llcyhbJ3Rlc3QnXSlcbiAgICAgICAgY29uc29sZS5sb2codGVzdENvb2tpZSk7IC8vIG91dHB1dHM6IHsgbmFtZTogJ3Rlc3QnLCB2YWx1ZTogJzEyMycgfVxuXG4gICAgICAgIGNvbnN0IGFsbENvb2tpZXMgPSBicm93c2VyLmdldENvb2tpZXMoKVxuICAgICAgICBjb25zb2xlLmxvZyhhbGxDb29raWVzKTtcbiAgICAgICAgLy8gb3V0cHV0czpcbiAgICAgICAgLy8gW1xuICAgICAgICAvLyAgICB7IG5hbWU6ICd0ZXN0JywgdmFsdWU6ICcxMjMnIH0sXG4gICAgICAgIC8vICAgIHsgbmFtZTogJ3Rlc3QyJywgdmFsdWU6ICc0NTYnIH1cbiAgICAgICAgLy8gXVxuICAgIH0pXG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGFsaWFzIGJyb3dzZXIuZ2V0Q29va2llXG4gKiBAcGFyYW0ge1N0cmluZ1tdPX0gbmFtZXMgIG5hbWVzIG9mIHJlcXVlc3RlZCBjb29raWVzXG4gKiBAcmV0dXJuIHtPYmplY3RbXX0gICAgICAgIHJlcXVlc3RlZCBjb29raWVzIGlmIGV4aXN0aW5nXG4gKiBAdXNlcyB3ZWJkcml2ZXIvZ2V0QWxsQ29va2llc1xuICpcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29va2llcyhuYW1lcykge1xuICAgIGNvbnN0IG5hbWVzTGlzdCA9IHR5cGVvZiBuYW1lcyAhPT0gJ3VuZGVmaW5lZCcgJiYgIUFycmF5LmlzQXJyYXkobmFtZXMpID8gW25hbWVzXSA6IG5hbWVzXG5cbiAgICBpZiAodHlwZW9mIG5hbWVzTGlzdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsQ29va2llcygpXG4gICAgfVxuXG4gICAgaWYgKG5hbWVzTGlzdC5ldmVyeShvYmogPT4gdHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbnB1dCAoc2VlIGh0dHA6Ly93ZWJkcml2ZXIuaW8vZG9jcy9hcGkvYnJvd3Nlci9nZXRDb29raWVzLmh0bWwgZm9yIGRvY3VtZW50YXRpb24uJylcbiAgICB9XG5cbiAgICBjb25zdCBhbGxDb29raWVzID0gYXdhaXQgdGhpcy5nZXRBbGxDb29raWVzKClcblxuICAgIHJldHVybiBhbGxDb29raWVzLmZpbHRlcihjb29raWUgPT4gbmFtZXNMaXN0LmluY2x1ZGVzKGNvb2tpZS5uYW1lKSlcbn1cbiJdfQ==