"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _worker = _interopRequireDefault(require("./worker"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const log = (0, _logger.default)('wdio-local-runner');

class LocalRunner {
  constructor(configFile, config) {
    this.configFile = configFile;
    this.config = config;
    this.workerPool = {};
  }
  /**
   * nothing to initialise when running locally
   */


  initialise() {}

  getWorkerCount() {
    return Object.keys(this.workerPool).length;
  }

  run(_ref) {
    let {
      command,
      argv
    } = _ref,
        options = _objectWithoutProperties(_ref, ["command", "argv"]);

    /**
     * adjust max listeners on stdout/stderr when creating listeners
     */
    const workerCnt = this.getWorkerCount();

    if (workerCnt >= process.stdout.getMaxListeners() - 2) {
      process.stdout.setMaxListeners(workerCnt + 2);
      process.stderr.setMaxListeners(workerCnt + 2);
    }

    const worker = new _worker.default(this.config, options);
    this.workerPool[options.cid] = worker;
    worker.postMessage(command, argv);
    return worker;
  }
  /**
   * shutdown all worker processes
   *
   * @return {Promise}  resolves when all worker have been shutdown or
   *                    a timeout was reached
   */


  shutdown() {
    log.info('Shutting down spawned worker');

    for (const [cid, worker] of Object.entries(this.workerPool)) {
      if (!worker.isBusy) {
        delete this.workerPool[cid];
        continue;
      }

      worker.postMessage('endSession', {});
    }

    return new Promise(resolve => {
      const interval = setInterval(() => {
        const busyWorker = Object.entries(this.workerPool).filter(([, worker]) => worker.isBusy).length;
        log.info(`Waiting for ${busyWorker} to shut down gracefully`);

        if (busyWorker === 0) {
          clearInterval(interval);
          log.info('shutting down');
          return resolve();
        }
      }, 250);
      setTimeout(resolve, _constants.SHUTDOWN_TIMEOUT);
    });
  }

}

exports.default = LocalRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJsb2ciLCJMb2NhbFJ1bm5lciIsImNvbnN0cnVjdG9yIiwiY29uZmlnRmlsZSIsImNvbmZpZyIsIndvcmtlclBvb2wiLCJpbml0aWFsaXNlIiwiZ2V0V29ya2VyQ291bnQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwicnVuIiwiY29tbWFuZCIsImFyZ3YiLCJvcHRpb25zIiwid29ya2VyQ250IiwicHJvY2VzcyIsInN0ZG91dCIsImdldE1heExpc3RlbmVycyIsInNldE1heExpc3RlbmVycyIsInN0ZGVyciIsIndvcmtlciIsIldvcmtlckluc3RhbmNlIiwiY2lkIiwicG9zdE1lc3NhZ2UiLCJzaHV0ZG93biIsImluZm8iLCJlbnRyaWVzIiwiaXNCdXN5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiYnVzeVdvcmtlciIsImZpbHRlciIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0IiwiU0hVVERPV05fVElNRU9VVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7Ozs7Ozs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHLHFCQUFPLG1CQUFQLENBQVo7O0FBRWUsTUFBTUMsV0FBTixDQUFrQjtBQUM3QkMsRUFBQUEsV0FBVyxDQUFFQyxVQUFGLEVBQWNDLE1BQWQsRUFBc0I7QUFDN0IsU0FBS0QsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLQyxVQUFMLEdBQWtCLEVBQWxCO0FBQ0g7QUFFRDs7Ozs7QUFHQUMsRUFBQUEsVUFBVSxHQUFJLENBQUU7O0FBRWhCQyxFQUFBQSxjQUFjLEdBQUk7QUFDZCxXQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLSixVQUFqQixFQUE2QkssTUFBcEM7QUFDSDs7QUFFREMsRUFBQUEsR0FBRyxPQUFpQztBQUFBLFFBQS9CO0FBQUVDLE1BQUFBLE9BQUY7QUFBV0MsTUFBQUE7QUFBWCxLQUErQjtBQUFBLFFBQVhDLE9BQVc7O0FBQ2hDOzs7QUFHQSxVQUFNQyxTQUFTLEdBQUcsS0FBS1IsY0FBTCxFQUFsQjs7QUFDQSxRQUFJUSxTQUFTLElBQUlDLE9BQU8sQ0FBQ0MsTUFBUixDQUFlQyxlQUFmLEtBQW1DLENBQXBELEVBQXVEO0FBQ25ERixNQUFBQSxPQUFPLENBQUNDLE1BQVIsQ0FBZUUsZUFBZixDQUErQkosU0FBUyxHQUFHLENBQTNDO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ0ksTUFBUixDQUFlRCxlQUFmLENBQStCSixTQUFTLEdBQUcsQ0FBM0M7QUFDSDs7QUFFRCxVQUFNTSxNQUFNLEdBQUcsSUFBSUMsZUFBSixDQUFtQixLQUFLbEIsTUFBeEIsRUFBZ0NVLE9BQWhDLENBQWY7QUFDQSxTQUFLVCxVQUFMLENBQWdCUyxPQUFPLENBQUNTLEdBQXhCLElBQStCRixNQUEvQjtBQUNBQSxJQUFBQSxNQUFNLENBQUNHLFdBQVAsQ0FBbUJaLE9BQW5CLEVBQTRCQyxJQUE1QjtBQUVBLFdBQU9RLE1BQVA7QUFDSDtBQUVEOzs7Ozs7OztBQU1BSSxFQUFBQSxRQUFRLEdBQUk7QUFDUnpCLElBQUFBLEdBQUcsQ0FBQzBCLElBQUosQ0FBUyw4QkFBVDs7QUFFQSxTQUFLLE1BQU0sQ0FBQ0gsR0FBRCxFQUFNRixNQUFOLENBQVgsSUFBNEJiLE1BQU0sQ0FBQ21CLE9BQVAsQ0FBZSxLQUFLdEIsVUFBcEIsQ0FBNUIsRUFBNkQ7QUFDekQsVUFBSSxDQUFDZ0IsTUFBTSxDQUFDTyxNQUFaLEVBQW9CO0FBQ2hCLGVBQU8sS0FBS3ZCLFVBQUwsQ0FBZ0JrQixHQUFoQixDQUFQO0FBQ0E7QUFDSDs7QUFFREYsTUFBQUEsTUFBTSxDQUFDRyxXQUFQLENBQW1CLFlBQW5CLEVBQWlDLEVBQWpDO0FBQ0g7O0FBRUQsV0FBTyxJQUFJSyxPQUFKLENBQWFDLE9BQUQsSUFBYTtBQUM1QixZQUFNQyxRQUFRLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBQy9CLGNBQU1DLFVBQVUsR0FBR3pCLE1BQU0sQ0FBQ21CLE9BQVAsQ0FBZSxLQUFLdEIsVUFBcEIsRUFDZDZCLE1BRGMsQ0FDUCxDQUFDLEdBQUdiLE1BQUgsQ0FBRCxLQUFnQkEsTUFBTSxDQUFDTyxNQURoQixFQUN3QmxCLE1BRDNDO0FBR0FWLFFBQUFBLEdBQUcsQ0FBQzBCLElBQUosQ0FBVSxlQUFjTyxVQUFXLDBCQUFuQzs7QUFDQSxZQUFJQSxVQUFVLEtBQUssQ0FBbkIsRUFBc0I7QUFDbEJFLFVBQUFBLGFBQWEsQ0FBQ0osUUFBRCxDQUFiO0FBQ0EvQixVQUFBQSxHQUFHLENBQUMwQixJQUFKLENBQVMsZUFBVDtBQUNBLGlCQUFPSSxPQUFPLEVBQWQ7QUFDSDtBQUNKLE9BVjJCLEVBVXpCLEdBVnlCLENBQTVCO0FBWUFNLE1BQUFBLFVBQVUsQ0FBQ04sT0FBRCxFQUFVTywyQkFBVixDQUFWO0FBQ0gsS0FkTSxDQUFQO0FBZUg7O0FBbEU0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSAnQHdkaW8vbG9nZ2VyJ1xuXG5pbXBvcnQgV29ya2VySW5zdGFuY2UgZnJvbSAnLi93b3JrZXInXG5pbXBvcnQgeyBTSFVURE9XTl9USU1FT1VUIH0gZnJvbSAnLi9jb25zdGFudHMnXG5cbmNvbnN0IGxvZyA9IGxvZ2dlcignd2Rpby1sb2NhbC1ydW5uZXInKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbFJ1bm5lciB7XG4gICAgY29uc3RydWN0b3IgKGNvbmZpZ0ZpbGUsIGNvbmZpZykge1xuICAgICAgICB0aGlzLmNvbmZpZ0ZpbGUgPSBjb25maWdGaWxlXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnXG4gICAgICAgIHRoaXMud29ya2VyUG9vbCA9IHt9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbm90aGluZyB0byBpbml0aWFsaXNlIHdoZW4gcnVubmluZyBsb2NhbGx5XG4gICAgICovXG4gICAgaW5pdGlhbGlzZSAoKSB7fVxuXG4gICAgZ2V0V29ya2VyQ291bnQgKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy53b3JrZXJQb29sKS5sZW5ndGhcbiAgICB9XG5cbiAgICBydW4gKHsgY29tbWFuZCwgYXJndiwgLi4ub3B0aW9ucyB9KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhZGp1c3QgbWF4IGxpc3RlbmVycyBvbiBzdGRvdXQvc3RkZXJyIHdoZW4gY3JlYXRpbmcgbGlzdGVuZXJzXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCB3b3JrZXJDbnQgPSB0aGlzLmdldFdvcmtlckNvdW50KClcbiAgICAgICAgaWYgKHdvcmtlckNudCA+PSBwcm9jZXNzLnN0ZG91dC5nZXRNYXhMaXN0ZW5lcnMoKSAtIDIpIHtcbiAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LnNldE1heExpc3RlbmVycyh3b3JrZXJDbnQgKyAyKVxuICAgICAgICAgICAgcHJvY2Vzcy5zdGRlcnIuc2V0TWF4TGlzdGVuZXJzKHdvcmtlckNudCArIDIpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB3b3JrZXIgPSBuZXcgV29ya2VySW5zdGFuY2UodGhpcy5jb25maWcsIG9wdGlvbnMpXG4gICAgICAgIHRoaXMud29ya2VyUG9vbFtvcHRpb25zLmNpZF0gPSB3b3JrZXJcbiAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKGNvbW1hbmQsIGFyZ3YpXG5cbiAgICAgICAgcmV0dXJuIHdvcmtlclxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNodXRkb3duIGFsbCB3b3JrZXIgcHJvY2Vzc2VzXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgcmVzb2x2ZXMgd2hlbiBhbGwgd29ya2VyIGhhdmUgYmVlbiBzaHV0ZG93biBvclxuICAgICAqICAgICAgICAgICAgICAgICAgICBhIHRpbWVvdXQgd2FzIHJlYWNoZWRcbiAgICAgKi9cbiAgICBzaHV0ZG93biAoKSB7XG4gICAgICAgIGxvZy5pbmZvKCdTaHV0dGluZyBkb3duIHNwYXduZWQgd29ya2VyJylcblxuICAgICAgICBmb3IgKGNvbnN0IFtjaWQsIHdvcmtlcl0gb2YgT2JqZWN0LmVudHJpZXModGhpcy53b3JrZXJQb29sKSkge1xuICAgICAgICAgICAgaWYgKCF3b3JrZXIuaXNCdXN5KSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMud29ya2VyUG9vbFtjaWRdXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKCdlbmRTZXNzaW9uJywge30pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1c3lXb3JrZXIgPSBPYmplY3QuZW50cmllcyh0aGlzLndvcmtlclBvb2wpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKFssIHdvcmtlcl0pID0+IHdvcmtlci5pc0J1c3kpLmxlbmd0aFxuXG4gICAgICAgICAgICAgICAgbG9nLmluZm8oYFdhaXRpbmcgZm9yICR7YnVzeVdvcmtlcn0gdG8gc2h1dCBkb3duIGdyYWNlZnVsbHlgKVxuICAgICAgICAgICAgICAgIGlmIChidXN5V29ya2VyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXG4gICAgICAgICAgICAgICAgICAgIGxvZy5pbmZvKCdzaHV0dGluZyBkb3duJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDI1MClcblxuICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBTSFVURE9XTl9USU1FT1VUKVxuICAgICAgICB9KVxuICAgIH1cbn1cbiJdfQ==