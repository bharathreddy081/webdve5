"use strict";

require("source-map-support/register");

var _asyncExitHook = _interopRequireDefault(require("async-exit-hook"));

var _runner = _interopRequireDefault(require("@wdio/runner"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-local-runner');
const runner = new _runner.default();
process.on('message', m => {
  var _context;

  if (!m || !m.command) {
    return log.info('Ignore message for worker:', m);
  }

  log.info(`Run worker command: ${m.command}`);
  runner[m.command](m).then(result => process.send({
    origin: 'worker',
    name: 'finisedCommand',
    content: {
      command: m.command,
      result
    }
  }), e => {
    log.error(`Failed launching test session: ${e.stack}`);
    process.exit(1);
  });
  runner.on('exit', (_context = process).exit.bind(_context));
  runner.on('error', ({
    name,
    message,
    stack
  }) => process.send({
    origin: 'worker',
    name: 'error',
    content: {
      name,
      message,
      stack
    }
  }));
});
/**
 * catch sigint messages as they are handled by main process
 */

(0, _asyncExitHook.default)(callback => {
  if (!callback) {
    return;
  }

  runner.sigintWasCalled = true;
  log.info(`Received SIGINT, giving process ${_constants.SHUTDOWN_TIMEOUT}ms to shutdown gracefully`);
  setTimeout(callback, _constants.SHUTDOWN_TIMEOUT);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydW4uanMiXSwibmFtZXMiOlsibG9nIiwicnVubmVyIiwiUnVubmVyIiwicHJvY2VzcyIsIm9uIiwibSIsImNvbW1hbmQiLCJpbmZvIiwidGhlbiIsInJlc3VsdCIsInNlbmQiLCJvcmlnaW4iLCJuYW1lIiwiY29udGVudCIsImUiLCJlcnJvciIsInN0YWNrIiwiZXhpdCIsIm1lc3NhZ2UiLCJjYWxsYmFjayIsInNpZ2ludFdhc0NhbGxlZCIsIlNIVVRET1dOX1RJTUVPVVQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7QUFFQSxNQUFNQSxHQUFHLEdBQUcscUJBQU8sbUJBQVAsQ0FBWjtBQUVBLE1BQU1DLE1BQU0sR0FBRyxJQUFJQyxlQUFKLEVBQWY7QUFDQUMsT0FBTyxDQUFDQyxFQUFSLENBQVcsU0FBWCxFQUF1QkMsQ0FBRCxJQUFPO0FBQUE7O0FBQ3pCLE1BQUksQ0FBQ0EsQ0FBRCxJQUFNLENBQUNBLENBQUMsQ0FBQ0MsT0FBYixFQUFzQjtBQUNsQixXQUFPTixHQUFHLENBQUNPLElBQUosQ0FBUyw0QkFBVCxFQUF1Q0YsQ0FBdkMsQ0FBUDtBQUNIOztBQUVETCxFQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBVSx1QkFBc0JGLENBQUMsQ0FBQ0MsT0FBUSxFQUExQztBQUNBTCxFQUFBQSxNQUFNLENBQUNJLENBQUMsQ0FBQ0MsT0FBSCxDQUFOLENBQWtCRCxDQUFsQixFQUFxQkcsSUFBckIsQ0FDS0MsTUFBRCxJQUFZTixPQUFPLENBQUNPLElBQVIsQ0FBYTtBQUNyQkMsSUFBQUEsTUFBTSxFQUFFLFFBRGE7QUFFckJDLElBQUFBLElBQUksRUFBRSxnQkFGZTtBQUdyQkMsSUFBQUEsT0FBTyxFQUFFO0FBQ0xQLE1BQUFBLE9BQU8sRUFBRUQsQ0FBQyxDQUFDQyxPQUROO0FBRUxHLE1BQUFBO0FBRks7QUFIWSxHQUFiLENBRGhCLEVBU0tLLENBQUQsSUFBTztBQUNIZCxJQUFBQSxHQUFHLENBQUNlLEtBQUosQ0FBVyxrQ0FBaUNELENBQUMsQ0FBQ0UsS0FBTSxFQUFwRDtBQUNBYixJQUFBQSxPQUFPLENBQUNjLElBQVIsQ0FBYSxDQUFiO0FBQ0gsR0FaTDtBQWVBaEIsRUFBQUEsTUFBTSxDQUFDRyxFQUFQLENBQVUsTUFBVixFQUFvQixZQUFBRCxPQUFPLEVBQUNjLElBQTVCO0FBQ0FoQixFQUFBQSxNQUFNLENBQUNHLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLENBQUM7QUFBRVEsSUFBQUEsSUFBRjtBQUFRTSxJQUFBQSxPQUFSO0FBQWlCRixJQUFBQTtBQUFqQixHQUFELEtBQThCYixPQUFPLENBQUNPLElBQVIsQ0FBYTtBQUMxREMsSUFBQUEsTUFBTSxFQUFFLFFBRGtEO0FBRTFEQyxJQUFBQSxJQUFJLEVBQUUsT0FGb0Q7QUFHMURDLElBQUFBLE9BQU8sRUFBRTtBQUFFRCxNQUFBQSxJQUFGO0FBQVFNLE1BQUFBLE9BQVI7QUFBaUJGLE1BQUFBO0FBQWpCO0FBSGlELEdBQWIsQ0FBakQ7QUFLSCxDQTNCRDtBQTZCQTs7OztBQUdBLDRCQUFVRyxRQUFELElBQWM7QUFDbkIsTUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDWDtBQUNIOztBQUVEbEIsRUFBQUEsTUFBTSxDQUFDbUIsZUFBUCxHQUF5QixJQUF6QjtBQUNBcEIsRUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVUsbUNBQWtDYywyQkFBaUIsMkJBQTdEO0FBQ0FDLEVBQUFBLFVBQVUsQ0FBQ0gsUUFBRCxFQUFXRSwyQkFBWCxDQUFWO0FBQ0gsQ0FSRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleGl0SG9vayBmcm9tICdhc3luYy1leGl0LWhvb2snXG5cbmltcG9ydCBSdW5uZXIgZnJvbSAnQHdkaW8vcnVubmVyJ1xuaW1wb3J0IGxvZ2dlciBmcm9tICdAd2Rpby9sb2dnZXInXG5cbmltcG9ydCB7IFNIVVRET1dOX1RJTUVPVVQgfSBmcm9tICcuL2NvbnN0YW50cydcblxuY29uc3QgbG9nID0gbG9nZ2VyKCd3ZGlvLWxvY2FsLXJ1bm5lcicpXG5cbmNvbnN0IHJ1bm5lciA9IG5ldyBSdW5uZXIoKVxucHJvY2Vzcy5vbignbWVzc2FnZScsIChtKSA9PiB7XG4gICAgaWYgKCFtIHx8ICFtLmNvbW1hbmQpIHtcbiAgICAgICAgcmV0dXJuIGxvZy5pbmZvKCdJZ25vcmUgbWVzc2FnZSBmb3Igd29ya2VyOicsIG0pXG4gICAgfVxuXG4gICAgbG9nLmluZm8oYFJ1biB3b3JrZXIgY29tbWFuZDogJHttLmNvbW1hbmR9YClcbiAgICBydW5uZXJbbS5jb21tYW5kXShtKS50aGVuKFxuICAgICAgICAocmVzdWx0KSA9PiBwcm9jZXNzLnNlbmQoe1xuICAgICAgICAgICAgb3JpZ2luOiAnd29ya2VyJyxcbiAgICAgICAgICAgIG5hbWU6ICdmaW5pc2VkQ29tbWFuZCcsXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogbS5jb21tYW5kLFxuICAgICAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgKGUpID0+IHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihgRmFpbGVkIGxhdW5jaGluZyB0ZXN0IHNlc3Npb246ICR7ZS5zdGFja31gKVxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgICAgIH1cbiAgICApXG5cbiAgICBydW5uZXIub24oJ2V4aXQnLCA6OnByb2Nlc3MuZXhpdClcbiAgICBydW5uZXIub24oJ2Vycm9yJywgKHsgbmFtZSwgbWVzc2FnZSwgc3RhY2sgfSkgPT4gcHJvY2Vzcy5zZW5kKHtcbiAgICAgICAgb3JpZ2luOiAnd29ya2VyJyxcbiAgICAgICAgbmFtZTogJ2Vycm9yJyxcbiAgICAgICAgY29udGVudDogeyBuYW1lLCBtZXNzYWdlLCBzdGFjayB9XG4gICAgfSkpXG59KVxuXG4vKipcbiAqIGNhdGNoIHNpZ2ludCBtZXNzYWdlcyBhcyB0aGV5IGFyZSBoYW5kbGVkIGJ5IG1haW4gcHJvY2Vzc1xuICovXG5leGl0SG9vaygoY2FsbGJhY2spID0+IHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHJ1bm5lci5zaWdpbnRXYXNDYWxsZWQgPSB0cnVlXG4gICAgbG9nLmluZm8oYFJlY2VpdmVkIFNJR0lOVCwgZ2l2aW5nIHByb2Nlc3MgJHtTSFVURE9XTl9USU1FT1VUfW1zIHRvIHNodXRkb3duIGdyYWNlZnVsbHlgKVxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIFNIVVRET1dOX1RJTUVPVVQpXG59KVxuIl19