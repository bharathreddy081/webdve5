"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _util = _interopRequireDefault(require("util"));

var _ansiEscapes = _interopRequireDefault(require("ansi-escapes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CLInterface {
  constructor() {
    var _context;

    this.i = 0;
    this.stdoutBuffer = [];
    this.stderrBuffer = [];
    this.out = (_context = process.stdout).write.bind(_context);
    this.err = (_context = process.stderr).write.bind(_context);
    this.inDebugMode = false;
    this.clearAll();
    /**
     * don't modify stdout and stderr streams for unit tests
     */

    /* istanbul ignore if */

    if (!process.env.WDIO_TEST) {
      this.wrapStdio(process.stdout, this.stdoutBuffer);
      this.wrapStdio(process.stderr, this.stderrBuffer);
    }
  }

  wrapStdio(stream, buffer) {
    const out = stream.write.bind(stream);

    stream.write = chunk => {
      if (this.inDebugMode) {
        return out(chunk);
      }

      buffer.push(chunk);
      return true;
    };
  }

  clearBuffer() {
    for (let i = this.stdoutBuffer.length; i > 0; --i) {
      this.stdoutBuffer.pop();
    }

    for (let i = this.stderrBuffer.length; i > 0; --i) {
      this.stderrBuffer.pop();
    }
  }

  clearAll() {
    this.out(_ansiEscapes.default.clearScreen);
  }

  clearLine() {
    this.out(_ansiEscapes.default.eraseStartLine);
    this.out(_ansiEscapes.default.cursorLeft);
  }

  log(...messages) {
    this.out(_util.default.format.apply(this, messages) + '\n');
  }

  write(message) {
    this.out(message);
  }

}

exports.default = CLInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJDTEludGVyZmFjZSIsImNvbnN0cnVjdG9yIiwiaSIsInN0ZG91dEJ1ZmZlciIsInN0ZGVyckJ1ZmZlciIsIm91dCIsInByb2Nlc3MiLCJzdGRvdXQiLCJ3cml0ZSIsImVyciIsInN0ZGVyciIsImluRGVidWdNb2RlIiwiY2xlYXJBbGwiLCJlbnYiLCJXRElPX1RFU1QiLCJ3cmFwU3RkaW8iLCJzdHJlYW0iLCJidWZmZXIiLCJjaHVuayIsInB1c2giLCJjbGVhckJ1ZmZlciIsImxlbmd0aCIsInBvcCIsImFuc2lFc2NhcGVzIiwiY2xlYXJTY3JlZW4iLCJjbGVhckxpbmUiLCJlcmFzZVN0YXJ0TGluZSIsImN1cnNvckxlZnQiLCJsb2ciLCJtZXNzYWdlcyIsInV0aWwiLCJmb3JtYXQiLCJhcHBseSIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRWUsTUFBTUEsV0FBTixDQUFrQjtBQUM3QkMsRUFBQUEsV0FBVyxHQUFJO0FBQUE7O0FBQ1gsU0FBS0MsQ0FBTCxHQUFTLENBQVQ7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUNBLFNBQUtDLEdBQUwsR0FBYSxZQUFBQyxPQUFPLENBQUNDLE1BQVIsRUFBZUMsS0FBNUI7QUFDQSxTQUFLQyxHQUFMLEdBQWEsWUFBQUgsT0FBTyxDQUFDSSxNQUFSLEVBQWVGLEtBQTVCO0FBQ0EsU0FBS0csV0FBTCxHQUFtQixLQUFuQjtBQUVBLFNBQUtDLFFBQUw7QUFFQTs7OztBQUdBOztBQUNBLFFBQUksQ0FBQ04sT0FBTyxDQUFDTyxHQUFSLENBQVlDLFNBQWpCLEVBQTRCO0FBQ3hCLFdBQUtDLFNBQUwsQ0FBZVQsT0FBTyxDQUFDQyxNQUF2QixFQUErQixLQUFLSixZQUFwQztBQUNBLFdBQUtZLFNBQUwsQ0FBZVQsT0FBTyxDQUFDSSxNQUF2QixFQUErQixLQUFLTixZQUFwQztBQUNIO0FBQ0o7O0FBRURXLEVBQUFBLFNBQVMsQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEVBQWlCO0FBQ3RCLFVBQU1aLEdBQUcsR0FBS1csTUFBTSxDQUFDUixLQUFaLE1BQUtRLE1BQUwsQ0FBVDs7QUFDQUEsSUFBQUEsTUFBTSxDQUFDUixLQUFQLEdBQWVVLEtBQUssSUFBSTtBQUNwQixVQUFJLEtBQUtQLFdBQVQsRUFBc0I7QUFDbEIsZUFBT04sR0FBRyxDQUFDYSxLQUFELENBQVY7QUFDSDs7QUFFREQsTUFBQUEsTUFBTSxDQUFDRSxJQUFQLENBQVlELEtBQVo7QUFDQSxhQUFPLElBQVA7QUFDSCxLQVBEO0FBUUg7O0FBRURFLEVBQUFBLFdBQVcsR0FBSTtBQUNYLFNBQUssSUFBSWxCLENBQUMsR0FBRyxLQUFLQyxZQUFMLENBQWtCa0IsTUFBL0IsRUFBdUNuQixDQUFDLEdBQUcsQ0FBM0MsRUFBOEMsRUFBRUEsQ0FBaEQsRUFBbUQ7QUFDL0MsV0FBS0MsWUFBTCxDQUFrQm1CLEdBQWxCO0FBQ0g7O0FBQ0QsU0FBSyxJQUFJcEIsQ0FBQyxHQUFHLEtBQUtFLFlBQUwsQ0FBa0JpQixNQUEvQixFQUF1Q25CLENBQUMsR0FBRyxDQUEzQyxFQUE4QyxFQUFFQSxDQUFoRCxFQUFtRDtBQUMvQyxXQUFLRSxZQUFMLENBQWtCa0IsR0FBbEI7QUFDSDtBQUNKOztBQUVEVixFQUFBQSxRQUFRLEdBQUk7QUFDUixTQUFLUCxHQUFMLENBQVNrQixxQkFBWUMsV0FBckI7QUFDSDs7QUFFREMsRUFBQUEsU0FBUyxHQUFJO0FBQ1QsU0FBS3BCLEdBQUwsQ0FBU2tCLHFCQUFZRyxjQUFyQjtBQUNBLFNBQUtyQixHQUFMLENBQVNrQixxQkFBWUksVUFBckI7QUFDSDs7QUFFREMsRUFBQUEsR0FBRyxDQUFDLEdBQUdDLFFBQUosRUFBYztBQUNiLFNBQUt4QixHQUFMLENBQVN5QixjQUFLQyxNQUFMLENBQVlDLEtBQVosQ0FBa0IsSUFBbEIsRUFBd0JILFFBQXhCLElBQW9DLElBQTdDO0FBQ0g7O0FBRURyQixFQUFBQSxLQUFLLENBQUV5QixPQUFGLEVBQVc7QUFDWixTQUFLNUIsR0FBTCxDQUFTNEIsT0FBVDtBQUNIOztBQXpENEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXRpbCBmcm9tICd1dGlsJ1xuaW1wb3J0IGFuc2lFc2NhcGVzIGZyb20gJ2Fuc2ktZXNjYXBlcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ0xJbnRlcmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5pID0gMFxuICAgICAgICB0aGlzLnN0ZG91dEJ1ZmZlciA9IFtdXG4gICAgICAgIHRoaXMuc3RkZXJyQnVmZmVyID0gW11cbiAgICAgICAgdGhpcy5vdXQgPSA6OnByb2Nlc3Muc3Rkb3V0LndyaXRlXG4gICAgICAgIHRoaXMuZXJyID0gOjpwcm9jZXNzLnN0ZGVyci53cml0ZVxuICAgICAgICB0aGlzLmluRGVidWdNb2RlID0gZmFsc2VcblxuICAgICAgICB0aGlzLmNsZWFyQWxsKClcblxuICAgICAgICAvKipcbiAgICAgICAgICogZG9uJ3QgbW9kaWZ5IHN0ZG91dCBhbmQgc3RkZXJyIHN0cmVhbXMgZm9yIHVuaXQgdGVzdHNcbiAgICAgICAgICovXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIXByb2Nlc3MuZW52LldESU9fVEVTVCkge1xuICAgICAgICAgICAgdGhpcy53cmFwU3RkaW8ocHJvY2Vzcy5zdGRvdXQsIHRoaXMuc3Rkb3V0QnVmZmVyKVxuICAgICAgICAgICAgdGhpcy53cmFwU3RkaW8ocHJvY2Vzcy5zdGRlcnIsIHRoaXMuc3RkZXJyQnVmZmVyKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgd3JhcFN0ZGlvKHN0cmVhbSwgYnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IDo6c3RyZWFtLndyaXRlXG4gICAgICAgIHN0cmVhbS53cml0ZSA9IGNodW5rID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluRGVidWdNb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dChjaHVuaylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnVmZmVyLnB1c2goY2h1bmspXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXJCdWZmZXIgKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGRvdXRCdWZmZXIubGVuZ3RoOyBpID4gMDsgLS1pKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZG91dEJ1ZmZlci5wb3AoKVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0ZGVyckJ1ZmZlci5sZW5ndGg7IGkgPiAwOyAtLWkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RkZXJyQnVmZmVyLnBvcCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckFsbCAoKSB7XG4gICAgICAgIHRoaXMub3V0KGFuc2lFc2NhcGVzLmNsZWFyU2NyZWVuKVxuICAgIH1cblxuICAgIGNsZWFyTGluZSAoKSB7XG4gICAgICAgIHRoaXMub3V0KGFuc2lFc2NhcGVzLmVyYXNlU3RhcnRMaW5lKVxuICAgICAgICB0aGlzLm91dChhbnNpRXNjYXBlcy5jdXJzb3JMZWZ0KVxuICAgIH1cblxuICAgIGxvZyguLi5tZXNzYWdlcykge1xuICAgICAgICB0aGlzLm91dCh1dGlsLmZvcm1hdC5hcHBseSh0aGlzLCBtZXNzYWdlcykgKyAnXFxuJylcbiAgICB9XG5cbiAgICB3cml0ZSAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLm91dChtZXNzYWdlKVxuICAgIH1cbn1cbiJdfQ==