"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = executeHooksWithArgs;

require("source-map-support/register");

var _fibers = _interopRequireDefault(require("fibers"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-sync');
/**
 * Helper method to execute a row of hooks with certain parameters.
 * It will return with a reject promise due to a design decision to not let hooks/service intefer the
 * actual test process.
 *
 * @param  {Function|Function[]} hooks  list of hooks
 * @param  {Object[]} args  list of parameter for hook functions
 * @return {Promise}  promise that gets resolved once all hooks finished running
 */

function executeHooksWithArgs(hooks = [], args) {
  /**
   * make sure hooks are an array of functions
   */
  if (typeof hooks === 'function') {
    hooks = [hooks];
  }
  /**
   * make sure args is an array since we are calling apply
   */


  if (!Array.isArray(args)) {
    args = [args];
  }

  hooks = hooks.map(hook => new Promise(resolve => {
    let result;

    const execHook = () => {
      try {
        result = hook.apply(null, args);
      } catch (e) {
        log.error(e.stack);
        return resolve(e);
      }

      if (result && typeof result.then === 'function') {
        return result.then(resolve, e => {
          log.error(e.stack);
          resolve(e);
        });
      }

      resolve(result);
    };
    /**
     * after command hooks require additional Fiber environment
     */


    return (0, _fibers.default)(execHook).run();
  }));
  return Promise.all(hooks);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjdXRlSG9va3NXaXRoQXJncy5qcyJdLCJuYW1lcyI6WyJsb2ciLCJleGVjdXRlSG9va3NXaXRoQXJncyIsImhvb2tzIiwiYXJncyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImhvb2siLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc3VsdCIsImV4ZWNIb29rIiwiYXBwbHkiLCJlIiwiZXJyb3IiLCJzdGFjayIsInRoZW4iLCJydW4iLCJhbGwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHLHFCQUFPLFdBQVAsQ0FBWjtBQUVBOzs7Ozs7Ozs7O0FBU2UsU0FBU0Msb0JBQVQsQ0FBK0JDLEtBQUssR0FBRyxFQUF2QyxFQUEyQ0MsSUFBM0MsRUFBaUQ7QUFDNUQ7OztBQUdBLE1BQUksT0FBT0QsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUM3QkEsSUFBQUEsS0FBSyxHQUFHLENBQUNBLEtBQUQsQ0FBUjtBQUNIO0FBRUQ7Ozs7O0FBR0EsTUFBSSxDQUFDRSxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsSUFBZCxDQUFMLEVBQTBCO0FBQ3RCQSxJQUFBQSxJQUFJLEdBQUcsQ0FBQ0EsSUFBRCxDQUFQO0FBQ0g7O0FBRURELEVBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDSSxHQUFOLENBQVdDLElBQUQsSUFBVSxJQUFJQyxPQUFKLENBQWFDLE9BQUQsSUFBYTtBQUNqRCxRQUFJQyxNQUFKOztBQUVBLFVBQU1DLFFBQVEsR0FBRyxNQUFNO0FBQ25CLFVBQUk7QUFDQUQsUUFBQUEsTUFBTSxHQUFHSCxJQUFJLENBQUNLLEtBQUwsQ0FBVyxJQUFYLEVBQWlCVCxJQUFqQixDQUFUO0FBQ0gsT0FGRCxDQUVFLE9BQU9VLENBQVAsRUFBVTtBQUNSYixRQUFBQSxHQUFHLENBQUNjLEtBQUosQ0FBVUQsQ0FBQyxDQUFDRSxLQUFaO0FBQ0EsZUFBT04sT0FBTyxDQUFDSSxDQUFELENBQWQ7QUFDSDs7QUFDRCxVQUFJSCxNQUFNLElBQUksT0FBT0EsTUFBTSxDQUFDTSxJQUFkLEtBQXVCLFVBQXJDLEVBQWlEO0FBQzdDLGVBQU9OLE1BQU0sQ0FBQ00sSUFBUCxDQUFZUCxPQUFaLEVBQXNCSSxDQUFELElBQU87QUFDL0JiLFVBQUFBLEdBQUcsQ0FBQ2MsS0FBSixDQUFVRCxDQUFDLENBQUNFLEtBQVo7QUFDQU4sVUFBQUEsT0FBTyxDQUFDSSxDQUFELENBQVA7QUFDSCxTQUhNLENBQVA7QUFJSDs7QUFFREosTUFBQUEsT0FBTyxDQUFDQyxNQUFELENBQVA7QUFDSCxLQWZEO0FBaUJBOzs7OztBQUdBLFdBQU8scUJBQU1DLFFBQU4sRUFBZ0JNLEdBQWhCLEVBQVA7QUFDSCxHQXhCMkIsQ0FBcEIsQ0FBUjtBQTBCQSxTQUFPVCxPQUFPLENBQUNVLEdBQVIsQ0FBWWhCLEtBQVosQ0FBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEZpYmVyIGZyb20gJ2ZpYmVycydcbmltcG9ydCBsb2dnZXIgZnJvbSAnQHdkaW8vbG9nZ2VyJ1xuXG5jb25zdCBsb2cgPSBsb2dnZXIoJ3dkaW8tc3luYycpXG5cbi8qKlxuICogSGVscGVyIG1ldGhvZCB0byBleGVjdXRlIGEgcm93IG9mIGhvb2tzIHdpdGggY2VydGFpbiBwYXJhbWV0ZXJzLlxuICogSXQgd2lsbCByZXR1cm4gd2l0aCBhIHJlamVjdCBwcm9taXNlIGR1ZSB0byBhIGRlc2lnbiBkZWNpc2lvbiB0byBub3QgbGV0IGhvb2tzL3NlcnZpY2UgaW50ZWZlciB0aGVcbiAqIGFjdHVhbCB0ZXN0IHByb2Nlc3MuXG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb258RnVuY3Rpb25bXX0gaG9va3MgIGxpc3Qgb2YgaG9va3NcbiAqIEBwYXJhbSAge09iamVjdFtdfSBhcmdzICBsaXN0IG9mIHBhcmFtZXRlciBmb3IgaG9vayBmdW5jdGlvbnNcbiAqIEByZXR1cm4ge1Byb21pc2V9ICBwcm9taXNlIHRoYXQgZ2V0cyByZXNvbHZlZCBvbmNlIGFsbCBob29rcyBmaW5pc2hlZCBydW5uaW5nXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4ZWN1dGVIb29rc1dpdGhBcmdzIChob29rcyA9IFtdLCBhcmdzKSB7XG4gICAgLyoqXG4gICAgICogbWFrZSBzdXJlIGhvb2tzIGFyZSBhbiBhcnJheSBvZiBmdW5jdGlvbnNcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGhvb2tzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGhvb2tzID0gW2hvb2tzXVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG1ha2Ugc3VyZSBhcmdzIGlzIGFuIGFycmF5IHNpbmNlIHdlIGFyZSBjYWxsaW5nIGFwcGx5XG4gICAgICovXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZ3MpKSB7XG4gICAgICAgIGFyZ3MgPSBbYXJnc11cbiAgICB9XG5cbiAgICBob29rcyA9IGhvb2tzLm1hcCgoaG9vaykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdFxuXG4gICAgICAgIGNvbnN0IGV4ZWNIb29rID0gKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBob29rLmFwcGx5KG51bGwsIGFyZ3MpXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGUuc3RhY2spXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKHJlc29sdmUsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlLnN0YWNrKVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGUpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogYWZ0ZXIgY29tbWFuZCBob29rcyByZXF1aXJlIGFkZGl0aW9uYWwgRmliZXIgZW52aXJvbm1lbnRcbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiBGaWJlcihleGVjSG9vaykucnVuKClcbiAgICB9KSlcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChob29rcylcbn1cbiJdfQ==