"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeErrorMessage = sanitizeErrorMessage;
exports.filterSpecArgs = filterSpecArgs;

require("source-map-support/register");

var _constants = require("./constants");

/**
 * helper function that cleans up the stacktrace to remove all fibers and wdio-sync
 * execution entries
 */
function sanitizeErrorMessage(e) {
  let stack = e.stack.split(/\n/g);
  let errorMsg = stack.shift();
  let cwd = process.cwd();
  /**
   * filter out stack traces to wdio-sync and fibers
   * and transform absolute path to relative
   */

  stack = stack.filter(_constants.STACKTRACE_FILTER_FN);
  stack = stack.map(e => '    ' + e.replace(cwd + '/', '').trim());
  /**
   * error stack can be empty when test execution is aborted and
   * the application is not running
   */

  let errorLine = 'unknown error line';

  if (stack && stack.length) {
    errorLine = stack.shift().trim();
  }
  /**
   * correct error occurence
   */


  let lineToFix = stack[stack.length - 1];

  if (lineToFix && lineToFix.indexOf('index.js') > -1) {
    stack[stack.length - 1] = lineToFix.slice(0, lineToFix.indexOf('index.js')) + errorLine;
  } else {
    stack.unshift('    ' + errorLine);
  }
  /**
   * add back error message
   */


  stack.unshift(errorMsg);
  return stack.join('\n');
}
/**
 * filter out arguments passed to specFn & hookFn, don't allow callbacks
 * as there is no need for user to call e.g. `done()`
 */


function filterSpecArgs(args) {
  return args.filter(arg => typeof arg !== 'function');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJzYW5pdGl6ZUVycm9yTWVzc2FnZSIsImUiLCJzdGFjayIsInNwbGl0IiwiZXJyb3JNc2ciLCJzaGlmdCIsImN3ZCIsInByb2Nlc3MiLCJmaWx0ZXIiLCJTVEFDS1RSQUNFX0ZJTFRFUl9GTiIsIm1hcCIsInJlcGxhY2UiLCJ0cmltIiwiZXJyb3JMaW5lIiwibGVuZ3RoIiwibGluZVRvRml4IiwiaW5kZXhPZiIsInNsaWNlIiwidW5zaGlmdCIsImpvaW4iLCJmaWx0ZXJTcGVjQXJncyIsImFyZ3MiLCJhcmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUlPLFNBQVNBLG9CQUFULENBQStCQyxDQUEvQixFQUFrQztBQUNyQyxNQUFJQyxLQUFLLEdBQUdELENBQUMsQ0FBQ0MsS0FBRixDQUFRQyxLQUFSLENBQWMsS0FBZCxDQUFaO0FBQ0EsTUFBSUMsUUFBUSxHQUFHRixLQUFLLENBQUNHLEtBQU4sRUFBZjtBQUNBLE1BQUlDLEdBQUcsR0FBR0MsT0FBTyxDQUFDRCxHQUFSLEVBQVY7QUFFQTs7Ozs7QUFJQUosRUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNNLE1BQU4sQ0FBYUMsK0JBQWIsQ0FBUjtBQUNBUCxFQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ1EsR0FBTixDQUFXVCxDQUFELElBQU8sU0FBU0EsQ0FBQyxDQUFDVSxPQUFGLENBQVVMLEdBQUcsR0FBRyxHQUFoQixFQUFxQixFQUFyQixFQUF5Qk0sSUFBekIsRUFBMUIsQ0FBUjtBQUVBOzs7OztBQUlBLE1BQUlDLFNBQVMsR0FBRyxvQkFBaEI7O0FBQ0EsTUFBSVgsS0FBSyxJQUFJQSxLQUFLLENBQUNZLE1BQW5CLEVBQTJCO0FBQ3ZCRCxJQUFBQSxTQUFTLEdBQUdYLEtBQUssQ0FBQ0csS0FBTixHQUFjTyxJQUFkLEVBQVo7QUFDSDtBQUVEOzs7OztBQUdBLE1BQUlHLFNBQVMsR0FBR2IsS0FBSyxDQUFDQSxLQUFLLENBQUNZLE1BQU4sR0FBZSxDQUFoQixDQUFyQjs7QUFDQSxNQUFJQyxTQUFTLElBQUlBLFNBQVMsQ0FBQ0MsT0FBVixDQUFrQixVQUFsQixJQUFnQyxDQUFDLENBQWxELEVBQXFEO0FBQ2pEZCxJQUFBQSxLQUFLLENBQUNBLEtBQUssQ0FBQ1ksTUFBTixHQUFlLENBQWhCLENBQUwsR0FBMEJDLFNBQVMsQ0FBQ0UsS0FBVixDQUFnQixDQUFoQixFQUFtQkYsU0FBUyxDQUFDQyxPQUFWLENBQWtCLFVBQWxCLENBQW5CLElBQW9ESCxTQUE5RTtBQUNILEdBRkQsTUFFTztBQUNIWCxJQUFBQSxLQUFLLENBQUNnQixPQUFOLENBQWMsU0FBU0wsU0FBdkI7QUFDSDtBQUVEOzs7OztBQUdBWCxFQUFBQSxLQUFLLENBQUNnQixPQUFOLENBQWNkLFFBQWQ7QUFFQSxTQUFPRixLQUFLLENBQUNpQixJQUFOLENBQVcsSUFBWCxDQUFQO0FBQ0g7QUFFRDs7Ozs7O0FBSU8sU0FBU0MsY0FBVCxDQUF5QkMsSUFBekIsRUFBK0I7QUFDbEMsU0FBT0EsSUFBSSxDQUFDYixNQUFMLENBQWFjLEdBQUQsSUFBUyxPQUFPQSxHQUFQLEtBQWUsVUFBcEMsQ0FBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU1RBQ0tUUkFDRV9GSUxURVJfRk4gfSBmcm9tICcuL2NvbnN0YW50cydcblxuLyoqXG4gKiBoZWxwZXIgZnVuY3Rpb24gdGhhdCBjbGVhbnMgdXAgdGhlIHN0YWNrdHJhY2UgdG8gcmVtb3ZlIGFsbCBmaWJlcnMgYW5kIHdkaW8tc3luY1xuICogZXhlY3V0aW9uIGVudHJpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplRXJyb3JNZXNzYWdlIChlKSB7XG4gICAgbGV0IHN0YWNrID0gZS5zdGFjay5zcGxpdCgvXFxuL2cpXG4gICAgbGV0IGVycm9yTXNnID0gc3RhY2suc2hpZnQoKVxuICAgIGxldCBjd2QgPSBwcm9jZXNzLmN3ZCgpXG5cbiAgICAvKipcbiAgICAgKiBmaWx0ZXIgb3V0IHN0YWNrIHRyYWNlcyB0byB3ZGlvLXN5bmMgYW5kIGZpYmVyc1xuICAgICAqIGFuZCB0cmFuc2Zvcm0gYWJzb2x1dGUgcGF0aCB0byByZWxhdGl2ZVxuICAgICAqL1xuICAgIHN0YWNrID0gc3RhY2suZmlsdGVyKFNUQUNLVFJBQ0VfRklMVEVSX0ZOKVxuICAgIHN0YWNrID0gc3RhY2subWFwKChlKSA9PiAnICAgICcgKyBlLnJlcGxhY2UoY3dkICsgJy8nLCAnJykudHJpbSgpKVxuXG4gICAgLyoqXG4gICAgICogZXJyb3Igc3RhY2sgY2FuIGJlIGVtcHR5IHdoZW4gdGVzdCBleGVjdXRpb24gaXMgYWJvcnRlZCBhbmRcbiAgICAgKiB0aGUgYXBwbGljYXRpb24gaXMgbm90IHJ1bm5pbmdcbiAgICAgKi9cbiAgICBsZXQgZXJyb3JMaW5lID0gJ3Vua25vd24gZXJyb3IgbGluZSdcbiAgICBpZiAoc3RhY2sgJiYgc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIGVycm9yTGluZSA9IHN0YWNrLnNoaWZ0KCkudHJpbSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY29ycmVjdCBlcnJvciBvY2N1cmVuY2VcbiAgICAgKi9cbiAgICBsZXQgbGluZVRvRml4ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1cbiAgICBpZiAobGluZVRvRml4ICYmIGxpbmVUb0ZpeC5pbmRleE9mKCdpbmRleC5qcycpID4gLTEpIHtcbiAgICAgICAgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPSBsaW5lVG9GaXguc2xpY2UoMCwgbGluZVRvRml4LmluZGV4T2YoJ2luZGV4LmpzJykpICsgZXJyb3JMaW5lXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhY2sudW5zaGlmdCgnICAgICcgKyBlcnJvckxpbmUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYWRkIGJhY2sgZXJyb3IgbWVzc2FnZVxuICAgICAqL1xuICAgIHN0YWNrLnVuc2hpZnQoZXJyb3JNc2cpXG5cbiAgICByZXR1cm4gc3RhY2suam9pbignXFxuJylcbn1cblxuLyoqXG4gKiBmaWx0ZXIgb3V0IGFyZ3VtZW50cyBwYXNzZWQgdG8gc3BlY0ZuICYgaG9va0ZuLCBkb24ndCBhbGxvdyBjYWxsYmFja3NcbiAqIGFzIHRoZXJlIGlzIG5vIG5lZWQgZm9yIHVzZXIgdG8gY2FsbCBlLmcuIGBkb25lKClgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJTcGVjQXJncyAoYXJncykge1xuICAgIHJldHVybiBhcmdzLmZpbHRlcigoYXJnKSA9PiB0eXBlb2YgYXJnICE9PSAnZnVuY3Rpb24nKVxufVxuIl19