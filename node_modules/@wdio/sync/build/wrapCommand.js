"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = wrapCommand;

require("source-map-support/register");

var _future = _interopRequireDefault(require("fibers/future"));

var _executeHooksWithArgs = _interopRequireDefault(require("./executeHooksWithArgs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * wraps a function into a Fiber ready context to enable sync execution and hooks
 * @param  {Function}   fn             function to be executed
 * @param  {String}     commandName    name of that function
 * @param  {Function[]} beforeCommand  method to be executed before calling the actual function
 * @param  {Function[]} afterCommand   method to be executed after calling the actual function
 * @return {Function}   actual wrapped function
 */
function wrapCommand(commandName, fn) {
  /**
   * helper method that runs the command with before/afterCommand hook
   */
  const runCommand = async function (...args) {
    await (0, _executeHooksWithArgs.default)(this.options.beforeCommand, [commandName, args]);
    let commandResult;
    let commandError;

    try {
      commandResult = await fn.apply(this, args);
    } catch (e) {
      commandError = e;
    }

    await (0, _executeHooksWithArgs.default)(this.options.afterCommand, [commandName, args, commandResult, commandError]);

    if (commandError) {
      throw commandError;
    }

    return commandResult;
  };

  return function (...args) {
    const future = new _future.default();
    const result = runCommand.apply(this, args);
    result.then(future.return.bind(future), future.throw.bind(future));

    try {
      return future.wait();
    } catch (e) {
      /**
       * in case some 3rd party lib rejects without bundling into an error
       */
      if (typeof e === 'string') {
        throw new Error(e);
      }
      /**
       * in case we run commands where no fiber function was used
       * e.g. when we call deleteSession
       */


      if (e.message.includes('Can\'t wait without a fiber')) {
        return result;
      }

      throw e;
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93cmFwQ29tbWFuZC5qcyJdLCJuYW1lcyI6WyJ3cmFwQ29tbWFuZCIsImNvbW1hbmROYW1lIiwiZm4iLCJydW5Db21tYW5kIiwiYXJncyIsIm9wdGlvbnMiLCJiZWZvcmVDb21tYW5kIiwiY29tbWFuZFJlc3VsdCIsImNvbW1hbmRFcnJvciIsImFwcGx5IiwiZSIsImFmdGVyQ29tbWFuZCIsImZ1dHVyZSIsIkZ1dHVyZSIsInJlc3VsdCIsInRoZW4iLCJyZXR1cm4iLCJ0aHJvdyIsIndhaXQiLCJFcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUE7Ozs7QUFFQTs7Ozs7Ozs7QUFRZSxTQUFTQSxXQUFULENBQXNCQyxXQUF0QixFQUFtQ0MsRUFBbkMsRUFBdUM7QUFDbEQ7OztBQUdBLFFBQU1DLFVBQVUsR0FBRyxnQkFBZ0IsR0FBR0MsSUFBbkIsRUFBeUI7QUFDeEMsVUFBTSxtQ0FDRixLQUFLQyxPQUFMLENBQWFDLGFBRFgsRUFFRixDQUFDTCxXQUFELEVBQWNHLElBQWQsQ0FGRSxDQUFOO0FBS0EsUUFBSUcsYUFBSjtBQUNBLFFBQUlDLFlBQUo7O0FBQ0EsUUFBSTtBQUNBRCxNQUFBQSxhQUFhLEdBQUcsTUFBTUwsRUFBRSxDQUFDTyxLQUFILENBQVMsSUFBVCxFQUFlTCxJQUFmLENBQXRCO0FBQ0gsS0FGRCxDQUVFLE9BQU9NLENBQVAsRUFBVTtBQUNSRixNQUFBQSxZQUFZLEdBQUdFLENBQWY7QUFDSDs7QUFFRCxVQUFNLG1DQUNGLEtBQUtMLE9BQUwsQ0FBYU0sWUFEWCxFQUVGLENBQUNWLFdBQUQsRUFBY0csSUFBZCxFQUFvQkcsYUFBcEIsRUFBbUNDLFlBQW5DLENBRkUsQ0FBTjs7QUFLQSxRQUFJQSxZQUFKLEVBQWtCO0FBQ2QsWUFBTUEsWUFBTjtBQUNIOztBQUVELFdBQU9ELGFBQVA7QUFDSCxHQXhCRDs7QUEwQkEsU0FBTyxVQUFVLEdBQUdILElBQWIsRUFBbUI7QUFDdEIsVUFBTVEsTUFBTSxHQUFHLElBQUlDLGVBQUosRUFBZjtBQUVBLFVBQU1DLE1BQU0sR0FBR1gsVUFBVSxDQUFDTSxLQUFYLENBQWlCLElBQWpCLEVBQXVCTCxJQUF2QixDQUFmO0FBQ0FVLElBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFjSCxNQUFNLENBQUNJLE1BQXJCLE1BQWNKLE1BQWQsR0FBK0JBLE1BQU0sQ0FBQ0ssS0FBdEMsTUFBK0JMLE1BQS9COztBQUVBLFFBQUk7QUFDQSxhQUFPQSxNQUFNLENBQUNNLElBQVAsRUFBUDtBQUNILEtBRkQsQ0FFRSxPQUFPUixDQUFQLEVBQVU7QUFDUjs7O0FBR0EsVUFBSSxPQUFPQSxDQUFQLEtBQWEsUUFBakIsRUFBMkI7QUFDdkIsY0FBTSxJQUFJUyxLQUFKLENBQVVULENBQVYsQ0FBTjtBQUNIO0FBRUQ7Ozs7OztBQUlBLFVBQUlBLENBQUMsQ0FBQ1UsT0FBRixDQUFVQyxRQUFWLENBQW1CLDZCQUFuQixDQUFKLEVBQXVEO0FBQ25ELGVBQU9QLE1BQVA7QUFDSDs7QUFFRCxZQUFNSixDQUFOO0FBQ0g7QUFDSixHQTFCRDtBQTJCSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGdXR1cmUgZnJvbSAnZmliZXJzL2Z1dHVyZSdcblxuaW1wb3J0IGV4ZWN1dGVIb29rc1dpdGhBcmdzIGZyb20gJy4vZXhlY3V0ZUhvb2tzV2l0aEFyZ3MnXG5cbi8qKlxuICogd3JhcHMgYSBmdW5jdGlvbiBpbnRvIGEgRmliZXIgcmVhZHkgY29udGV4dCB0byBlbmFibGUgc3luYyBleGVjdXRpb24gYW5kIGhvb2tzXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gICBmbiAgICAgICAgICAgICBmdW5jdGlvbiB0byBiZSBleGVjdXRlZFxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgY29tbWFuZE5hbWUgICAgbmFtZSBvZiB0aGF0IGZ1bmN0aW9uXG4gKiBAcGFyYW0gIHtGdW5jdGlvbltdfSBiZWZvcmVDb21tYW5kICBtZXRob2QgdG8gYmUgZXhlY3V0ZWQgYmVmb3JlIGNhbGxpbmcgdGhlIGFjdHVhbCBmdW5jdGlvblxuICogQHBhcmFtICB7RnVuY3Rpb25bXX0gYWZ0ZXJDb21tYW5kICAgbWV0aG9kIHRvIGJlIGV4ZWN1dGVkIGFmdGVyIGNhbGxpbmcgdGhlIGFjdHVhbCBmdW5jdGlvblxuICogQHJldHVybiB7RnVuY3Rpb259ICAgYWN0dWFsIHdyYXBwZWQgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcENvbW1hbmQgKGNvbW1hbmROYW1lLCBmbikge1xuICAgIC8qKlxuICAgICAqIGhlbHBlciBtZXRob2QgdGhhdCBydW5zIHRoZSBjb21tYW5kIHdpdGggYmVmb3JlL2FmdGVyQ29tbWFuZCBob29rXG4gICAgICovXG4gICAgY29uc3QgcnVuQ29tbWFuZCA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGF3YWl0IGV4ZWN1dGVIb29rc1dpdGhBcmdzKFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmJlZm9yZUNvbW1hbmQsXG4gICAgICAgICAgICBbY29tbWFuZE5hbWUsIGFyZ3NdXG4gICAgICAgIClcblxuICAgICAgICBsZXQgY29tbWFuZFJlc3VsdFxuICAgICAgICBsZXQgY29tbWFuZEVycm9yXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb21tYW5kUmVzdWx0ID0gYXdhaXQgZm4uYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29tbWFuZEVycm9yID0gZVxuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgZXhlY3V0ZUhvb2tzV2l0aEFyZ3MoXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuYWZ0ZXJDb21tYW5kLFxuICAgICAgICAgICAgW2NvbW1hbmROYW1lLCBhcmdzLCBjb21tYW5kUmVzdWx0LCBjb21tYW5kRXJyb3JdXG4gICAgICAgIClcblxuICAgICAgICBpZiAoY29tbWFuZEVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBjb21tYW5kRXJyb3JcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21tYW5kUmVzdWx0XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGZ1dHVyZSA9IG5ldyBGdXR1cmUoKVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJ1bkNvbW1hbmQuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgcmVzdWx0LnRoZW4oOjpmdXR1cmUucmV0dXJuLCA6OmZ1dHVyZS50aHJvdylcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1dHVyZS53YWl0KClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBpbiBjYXNlIHNvbWUgM3JkIHBhcnR5IGxpYiByZWplY3RzIHdpdGhvdXQgYnVuZGxpbmcgaW50byBhbiBlcnJvclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAodHlwZW9mIGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogaW4gY2FzZSB3ZSBydW4gY29tbWFuZHMgd2hlcmUgbm8gZmliZXIgZnVuY3Rpb24gd2FzIHVzZWRcbiAgICAgICAgICAgICAqIGUuZy4gd2hlbiB3ZSBjYWxsIGRlbGV0ZVNlc3Npb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGUubWVzc2FnZS5pbmNsdWRlcygnQ2FuXFwndCB3YWl0IHdpdGhvdXQgYSBmaWJlcicpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=