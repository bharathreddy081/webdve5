"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _util = require("util");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _seleniumStandalone = _interopRequireDefault(require("selenium-standalone"));

var _getFilePath = _interopRequireDefault(require("./utils/getFilePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_LOG_FILENAME = 'selenium-standalone.txt';

class SeleniumStandaloneLauncher {
  constructor() {
    this.seleniumLogs = null;
    this.seleniumArgs = {};
    this.seleniumInstallArgs = {};
    return this;
  }

  async onPrepare(config) {
    this.seleniumArgs = config.seleniumArgs || {};
    this.seleniumInstallArgs = config.seleniumInstallArgs || {};
    this.seleniumLogs = config.seleniumLogs;
    this.skipSeleniumInstall = !!config.skipSeleniumInstall;

    if (!this.skipSeleniumInstall) {
      await (0, _util.promisify)(_seleniumStandalone.default.install)(this.seleniumInstallArgs);
    }

    this.process = await (0, _util.promisify)(_seleniumStandalone.default.start)(this.seleniumArgs);

    if (typeof this.seleniumLogs === 'string') {
      this._redirectLogStream();
    }
  }

  onComplete() {
    if (this.process) {
      this.process.kill();
    }
  }

  _redirectLogStream() {
    const logFile = (0, _getFilePath.default)(this.seleniumLogs, DEFAULT_LOG_FILENAME); // ensure file & directory exists

    _fsExtra.default.ensureFileSync(logFile);

    const logStream = _fsExtra.default.createWriteStream(logFile, {
      flags: 'w'
    });

    this.process.stdout.pipe(logStream);
    this.process.stderr.pipe(logStream);
  }

}

exports.default = SeleniumStandaloneLauncher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sYXVuY2hlci5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX0xPR19GSUxFTkFNRSIsIlNlbGVuaXVtU3RhbmRhbG9uZUxhdW5jaGVyIiwiY29uc3RydWN0b3IiLCJzZWxlbml1bUxvZ3MiLCJzZWxlbml1bUFyZ3MiLCJzZWxlbml1bUluc3RhbGxBcmdzIiwib25QcmVwYXJlIiwiY29uZmlnIiwic2tpcFNlbGVuaXVtSW5zdGFsbCIsIlNlbGVuaXVtU3RhbmRhbG9uZSIsImluc3RhbGwiLCJwcm9jZXNzIiwic3RhcnQiLCJfcmVkaXJlY3RMb2dTdHJlYW0iLCJvbkNvbXBsZXRlIiwia2lsbCIsImxvZ0ZpbGUiLCJmcyIsImVuc3VyZUZpbGVTeW5jIiwibG9nU3RyZWFtIiwiY3JlYXRlV3JpdGVTdHJlYW0iLCJmbGFncyIsInN0ZG91dCIsInBpcGUiLCJzdGRlcnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUVBOzs7O0FBRUEsTUFBTUEsb0JBQW9CLEdBQUcseUJBQTdCOztBQUVlLE1BQU1DLDBCQUFOLENBQWlDO0FBQzVDQyxFQUFBQSxXQUFXLEdBQUk7QUFDWCxTQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUNBLFNBQUtDLG1CQUFMLEdBQTJCLEVBQTNCO0FBRUEsV0FBTyxJQUFQO0FBQ0g7O0FBRUQsUUFBTUMsU0FBTixDQUFpQkMsTUFBakIsRUFBeUI7QUFDckIsU0FBS0gsWUFBTCxHQUFvQkcsTUFBTSxDQUFDSCxZQUFQLElBQXVCLEVBQTNDO0FBQ0EsU0FBS0MsbUJBQUwsR0FBMkJFLE1BQU0sQ0FBQ0YsbUJBQVAsSUFBOEIsRUFBekQ7QUFDQSxTQUFLRixZQUFMLEdBQW9CSSxNQUFNLENBQUNKLFlBQTNCO0FBQ0EsU0FBS0ssbUJBQUwsR0FBMkIsQ0FBQyxDQUFDRCxNQUFNLENBQUNDLG1CQUFwQzs7QUFFQSxRQUFJLENBQUMsS0FBS0EsbUJBQVYsRUFBK0I7QUFDM0IsWUFBTSxxQkFBVUMsNEJBQW1CQyxPQUE3QixFQUFzQyxLQUFLTCxtQkFBM0MsQ0FBTjtBQUNIOztBQUVELFNBQUtNLE9BQUwsR0FBZSxNQUFNLHFCQUFVRiw0QkFBbUJHLEtBQTdCLEVBQW9DLEtBQUtSLFlBQXpDLENBQXJCOztBQUVBLFFBQUksT0FBTyxLQUFLRCxZQUFaLEtBQTZCLFFBQWpDLEVBQTJDO0FBQ3ZDLFdBQUtVLGtCQUFMO0FBQ0g7QUFDSjs7QUFFREMsRUFBQUEsVUFBVSxHQUFJO0FBQ1YsUUFBRyxLQUFLSCxPQUFSLEVBQWlCO0FBQ2IsV0FBS0EsT0FBTCxDQUFhSSxJQUFiO0FBQ0g7QUFDSjs7QUFFREYsRUFBQUEsa0JBQWtCLEdBQUk7QUFDbEIsVUFBTUcsT0FBTyxHQUFHLDBCQUFZLEtBQUtiLFlBQWpCLEVBQStCSCxvQkFBL0IsQ0FBaEIsQ0FEa0IsQ0FHbEI7O0FBQ0FpQixxQkFBR0MsY0FBSCxDQUFrQkYsT0FBbEI7O0FBRUEsVUFBTUcsU0FBUyxHQUFHRixpQkFBR0csaUJBQUgsQ0FBcUJKLE9BQXJCLEVBQThCO0FBQUVLLE1BQUFBLEtBQUssRUFBRTtBQUFULEtBQTlCLENBQWxCOztBQUNBLFNBQUtWLE9BQUwsQ0FBYVcsTUFBYixDQUFvQkMsSUFBcEIsQ0FBeUJKLFNBQXpCO0FBQ0EsU0FBS1IsT0FBTCxDQUFhYSxNQUFiLENBQW9CRCxJQUFwQixDQUF5QkosU0FBekI7QUFDSDs7QUF6QzJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCdcblxuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJ1xuaW1wb3J0IFNlbGVuaXVtU3RhbmRhbG9uZSBmcm9tICdzZWxlbml1bS1zdGFuZGFsb25lJ1xuXG5pbXBvcnQgZ2V0RmlsZVBhdGggZnJvbSAnLi91dGlscy9nZXRGaWxlUGF0aCdcblxuY29uc3QgREVGQVVMVF9MT0dfRklMRU5BTUUgPSAnc2VsZW5pdW0tc3RhbmRhbG9uZS50eHQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVuaXVtU3RhbmRhbG9uZUxhdW5jaGVyIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuc2VsZW5pdW1Mb2dzID0gbnVsbFxuICAgICAgICB0aGlzLnNlbGVuaXVtQXJncyA9IHt9XG4gICAgICAgIHRoaXMuc2VsZW5pdW1JbnN0YWxsQXJncyA9IHt9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBhc3luYyBvblByZXBhcmUgKGNvbmZpZykge1xuICAgICAgICB0aGlzLnNlbGVuaXVtQXJncyA9IGNvbmZpZy5zZWxlbml1bUFyZ3MgfHwge31cbiAgICAgICAgdGhpcy5zZWxlbml1bUluc3RhbGxBcmdzID0gY29uZmlnLnNlbGVuaXVtSW5zdGFsbEFyZ3MgfHwge31cbiAgICAgICAgdGhpcy5zZWxlbml1bUxvZ3MgPSBjb25maWcuc2VsZW5pdW1Mb2dzXG4gICAgICAgIHRoaXMuc2tpcFNlbGVuaXVtSW5zdGFsbCA9ICEhY29uZmlnLnNraXBTZWxlbml1bUluc3RhbGxcblxuICAgICAgICBpZiAoIXRoaXMuc2tpcFNlbGVuaXVtSW5zdGFsbCkge1xuICAgICAgICAgICAgYXdhaXQgcHJvbWlzaWZ5KFNlbGVuaXVtU3RhbmRhbG9uZS5pbnN0YWxsKSh0aGlzLnNlbGVuaXVtSW5zdGFsbEFyZ3MpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnByb2Nlc3MgPSBhd2FpdCBwcm9taXNpZnkoU2VsZW5pdW1TdGFuZGFsb25lLnN0YXJ0KSh0aGlzLnNlbGVuaXVtQXJncylcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2VsZW5pdW1Mb2dzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fcmVkaXJlY3RMb2dTdHJlYW0oKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Db21wbGV0ZSAoKSB7XG4gICAgICAgIGlmKHRoaXMucHJvY2Vzcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzLmtpbGwoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3JlZGlyZWN0TG9nU3RyZWFtICgpIHtcbiAgICAgICAgY29uc3QgbG9nRmlsZSA9IGdldEZpbGVQYXRoKHRoaXMuc2VsZW5pdW1Mb2dzLCBERUZBVUxUX0xPR19GSUxFTkFNRSlcblxuICAgICAgICAvLyBlbnN1cmUgZmlsZSAmIGRpcmVjdG9yeSBleGlzdHNcbiAgICAgICAgZnMuZW5zdXJlRmlsZVN5bmMobG9nRmlsZSlcblxuICAgICAgICBjb25zdCBsb2dTdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShsb2dGaWxlLCB7IGZsYWdzOiAndycgfSlcbiAgICAgICAgdGhpcy5wcm9jZXNzLnN0ZG91dC5waXBlKGxvZ1N0cmVhbSlcbiAgICAgICAgdGhpcy5wcm9jZXNzLnN0ZGVyci5waXBlKGxvZ1N0cmVhbSlcbiAgICB9XG59XG4iXX0=